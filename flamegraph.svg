<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="4986"><g><title>ecs-bench`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (31 samples, 0.62%)</title><rect x="0.0000%" y="213" width="0.6217%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="31"/><text x="0.2500%" y="223.50"></text></g><g><title>ecs-bench`apecs::world::World::tick_with_context (29 samples, 0.58%)</title><rect x="0.6217%" y="213" width="0.5816%" height="15" fill="rgb(217,0,24)" fg:x="31" fg:w="29"/><text x="0.8717%" y="223.50"></text></g><g><title>ecs-bench`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (67 samples, 1.34%)</title><rect x="3.6502%" y="197" width="1.3438%" height="15" fill="rgb(221,193,54)" fg:x="182" fg:w="67"/><text x="3.9002%" y="207.50"></text></g><g><title>ecs-bench`&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (17 samples, 0.34%)</title><rect x="4.9940%" y="197" width="0.3410%" height="15" fill="rgb(248,212,6)" fg:x="249" fg:w="17"/><text x="5.2440%" y="207.50"></text></g><g><title>ecs-bench`DYLD-STUB$$mach_absolute_time (14 samples, 0.28%)</title><rect x="5.3349%" y="197" width="0.2808%" height="15" fill="rgb(208,68,35)" fg:x="266" fg:w="14"/><text x="5.5849%" y="207.50"></text></g><g><title>ecs-bench`apecs::schedule::IsSchedule::run (15 samples, 0.30%)</title><rect x="5.6157%" y="197" width="0.3008%" height="15" fill="rgb(232,128,0)" fg:x="280" fg:w="15"/><text x="5.8657%" y="207.50"></text></g><g><title>ecs-bench`&lt;apecs::system::SyncSchedule as apecs::schedule::IsSchedule&gt;::get_should_parallelize (10 samples, 0.20%)</title><rect x="15.0421%" y="181" width="0.2006%" height="15" fill="rgb(207,160,47)" fg:x="750" fg:w="10"/><text x="15.2921%" y="191.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::is_empty (32 samples, 0.64%)</title><rect x="15.2427%" y="181" width="0.6418%" height="15" fill="rgb(228,23,34)" fg:x="760" fg:w="32"/><text x="15.4927%" y="191.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::len (13 samples, 0.26%)</title><rect x="15.8845%" y="181" width="0.2607%" height="15" fill="rgb(218,30,26)" fg:x="792" fg:w="13"/><text x="16.1345%" y="191.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut (266 samples, 5.33%)</title><rect x="16.1452%" y="181" width="5.3349%" height="15" fill="rgb(220,122,19)" fg:x="805" fg:w="266"/><text x="16.3952%" y="191.50">ecs-ben..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (4 samples, 0.08%)</title><rect x="21.4801%" y="181" width="0.0802%" height="15" fill="rgb(250,228,42)" fg:x="1071" fg:w="4"/><text x="21.7301%" y="191.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (91 samples, 1.83%)</title><rect x="21.5604%" y="165" width="1.8251%" height="15" fill="rgb(240,193,28)" fg:x="1075" fg:w="91"/><text x="21.8104%" y="175.50">e..</text></g><g><title>ecs-bench`apecs::world::World::tick_with_context::_{{closure}} (1 samples, 0.02%)</title><rect x="23.3654%" y="149" width="0.0201%" height="15" fill="rgb(216,20,37)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="159.50"></text></g><g><title>ecs-bench`apecs::system::AsyncSystem::tick_async_system (1 samples, 0.02%)</title><rect x="23.3654%" y="133" width="0.0201%" height="15" fill="rgb(206,188,39)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="143.50"></text></g><g><title>ecs-bench`futures_lite::future::FutureExt::poll (1 samples, 0.02%)</title><rect x="23.3654%" y="117" width="0.0201%" height="15" fill="rgb(217,207,13)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="127.50"></text></g><g><title>ecs-bench`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="23.3654%" y="101" width="0.0201%" height="15" fill="rgb(231,73,38)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="111.50"></text></g><g><title>ecs-bench`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="23.3654%" y="85" width="0.0201%" height="15" fill="rgb(225,20,46)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="95.50"></text></g><g><title>ecs-bench`ecs_bench::async_run::_{{closure}} (1 samples, 0.02%)</title><rect x="23.3654%" y="69" width="0.0201%" height="15" fill="rgb(210,31,41)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="79.50"></text></g><g><title>ecs-bench`&lt;apecs::join::JoinedIter&lt;(A,B)&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="23.3654%" y="53" width="0.0201%" height="15" fill="rgb(221,200,47)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="63.50"></text></g><g><title>ecs-bench`apecs::storage::Entry&lt;T&gt;::as_mut (1 samples, 0.02%)</title><rect x="23.3654%" y="37" width="0.0201%" height="15" fill="rgb(226,26,5)" fg:x="1165" fg:w="1"/><text x="23.6154%" y="47.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 1.24%)</title><rect x="24.3482%" y="133" width="1.2435%" height="15" fill="rgb(249,33,26)" fg:x="1214" fg:w="62"/><text x="24.5982%" y="143.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut (212 samples, 4.25%)</title><rect x="21.5604%" y="181" width="4.2519%" height="15" fill="rgb(235,183,28)" fg:x="1075" fg:w="212"/><text x="21.8104%" y="191.50">ecs-b..</text></g><g><title>ecs-bench`core::mem::drop (121 samples, 2.43%)</title><rect x="23.3855%" y="165" width="2.4268%" height="15" fill="rgb(221,5,38)" fg:x="1166" fg:w="121"/><text x="23.6355%" y="175.50">ec..</text></g><g><title>ecs-bench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;apecs::system::AsyncSystem,alloc::alloc::Global&gt;&gt; (104 samples, 2.09%)</title><rect x="23.7264%" y="149" width="2.0858%" height="15" fill="rgb(247,18,42)" fg:x="1183" fg:w="104"/><text x="23.9764%" y="159.50">e..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::set_len (11 samples, 0.22%)</title><rect x="25.5917%" y="133" width="0.2206%" height="15" fill="rgb(241,131,45)" fg:x="1276" fg:w="11"/><text x="25.8417%" y="143.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::set_len (84 samples, 1.68%)</title><rect x="25.8123%" y="181" width="1.6847%" height="15" fill="rgb(249,31,29)" fg:x="1287" fg:w="84"/><text x="26.0623%" y="191.50"></text></g><g><title>ecs-bench`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (49 samples, 0.98%)</title><rect x="34.2760%" y="117" width="0.9828%" height="15" fill="rgb(225,111,53)" fg:x="1709" fg:w="49"/><text x="34.5260%" y="127.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (29 samples, 0.58%)</title><rect x="35.2587%" y="117" width="0.5816%" height="15" fill="rgb(238,160,17)" fg:x="1758" fg:w="29"/><text x="35.5087%" y="127.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (47 samples, 0.94%)</title><rect x="35.8404%" y="117" width="0.9426%" height="15" fill="rgb(214,148,48)" fg:x="1787" fg:w="47"/><text x="36.0904%" y="127.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (206 samples, 4.13%)</title><rect x="32.8720%" y="133" width="4.1316%" height="15" fill="rgb(232,36,49)" fg:x="1639" fg:w="206"/><text x="33.1220%" y="143.50">ecs-b..</text></g><g><title>ecs-bench`core::ptr::unique::Unique&lt;T&gt;::as_ptr (11 samples, 0.22%)</title><rect x="36.7830%" y="117" width="0.2206%" height="15" fill="rgb(209,103,24)" fg:x="1834" fg:w="11"/><text x="37.0330%" y="127.50"></text></g><g><title>ecs-bench`core::ptr::metadata::from_raw_parts_mut (28 samples, 0.56%)</title><rect x="38.5479%" y="117" width="0.5616%" height="15" fill="rgb(229,88,8)" fg:x="1922" fg:w="28"/><text x="38.7979%" y="127.50"></text></g><g><title>ecs-bench`&lt;apecs::system::SyncSchedule as apecs::schedule::IsSchedule&gt;::batches_mut (497 samples, 9.97%)</title><rect x="30.1845%" y="165" width="9.9679%" height="15" fill="rgb(213,181,19)" fg:x="1505" fg:w="497"/><text x="30.4345%" y="175.50">ecs-bench`&lt;ape..</text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (435 samples, 8.72%)</title><rect x="31.4280%" y="149" width="8.7244%" height="15" fill="rgb(254,191,54)" fg:x="1567" fg:w="435"/><text x="31.6780%" y="159.50">ecs-bench`&lt;a..</text></g><g><title>ecs-bench`core::slice::raw::from_raw_parts_mut (157 samples, 3.15%)</title><rect x="37.0036%" y="133" width="3.1488%" height="15" fill="rgb(241,83,37)" fg:x="1845" fg:w="157"/><text x="37.2536%" y="143.50">ecs..</text></g><g><title>ecs-bench`core::ptr::slice_from_raw_parts_mut (52 samples, 1.04%)</title><rect x="39.1095%" y="117" width="1.0429%" height="15" fill="rgb(233,36,39)" fg:x="1950" fg:w="52"/><text x="39.3595%" y="127.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (43 samples, 0.86%)</title><rect x="43.7024%" y="149" width="0.8624%" height="15" fill="rgb(226,3,54)" fg:x="2179" fg:w="43"/><text x="43.9524%" y="159.50"></text></g><g><title>ecs-bench`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (313 samples, 6.28%)</title><rect x="40.1524%" y="165" width="6.2776%" height="15" fill="rgb(245,192,40)" fg:x="2002" fg:w="313"/><text x="40.4024%" y="175.50">ecs-benc..</text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (93 samples, 1.87%)</title><rect x="44.5648%" y="149" width="1.8652%" height="15" fill="rgb(238,167,29)" fg:x="2222" fg:w="93"/><text x="44.8148%" y="159.50">e..</text></g><g><title>ecs-bench`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (38 samples, 0.76%)</title><rect x="46.4300%" y="165" width="0.7621%" height="15" fill="rgb(232,182,51)" fg:x="2315" fg:w="38"/><text x="46.6800%" y="175.50"></text></g><g><title>ecs-bench`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (22 samples, 0.44%)</title><rect x="49.0774%" y="133" width="0.4412%" height="15" fill="rgb(231,60,39)" fg:x="2447" fg:w="22"/><text x="49.3274%" y="143.50"></text></g><g><title>ecs-bench`core::slice::_&lt;impl [T]&gt;::as_mut_ptr (13 samples, 0.26%)</title><rect x="49.5187%" y="133" width="0.2607%" height="15" fill="rgb(208,69,12)" fg:x="2469" fg:w="13"/><text x="49.7687%" y="143.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (40 samples, 0.80%)</title><rect x="53.3494%" y="117" width="0.8022%" height="15" fill="rgb(235,93,37)" fg:x="2660" fg:w="40"/><text x="53.5994%" y="127.50"></text></g><g><title>ecs-bench`apecs::schedule::IsSchedule::run (1,360 samples, 27.28%)</title><rect x="27.4970%" y="181" width="27.2764%" height="15" fill="rgb(213,116,39)" fg:x="1371" fg:w="1360"/><text x="27.7470%" y="191.50">ecs-bench`apecs::schedule::IsSchedule::run</text></g><g><title>ecs-bench`core::slice::iter::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;mut [T]&gt;::into_iter (378 samples, 7.58%)</title><rect x="47.1921%" y="165" width="7.5812%" height="15" fill="rgb(222,207,29)" fg:x="2353" fg:w="378"/><text x="47.4421%" y="175.50">ecs-bench`..</text></g><g><title>ecs-bench`core::slice::_&lt;impl [T]&gt;::iter_mut (317 samples, 6.36%)</title><rect x="48.4156%" y="149" width="6.3578%" height="15" fill="rgb(206,96,30)" fg:x="2414" fg:w="317"/><text x="48.6656%" y="159.50">ecs-benc..</text></g><g><title>ecs-bench`core::slice::iter::IterMut&lt;T&gt;::new (249 samples, 4.99%)</title><rect x="49.7794%" y="133" width="4.9940%" height="15" fill="rgb(218,138,4)" fg:x="2482" fg:w="249"/><text x="50.0294%" y="143.50">ecs-be..</text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (31 samples, 0.62%)</title><rect x="54.1516%" y="117" width="0.6217%" height="15" fill="rgb(250,191,14)" fg:x="2700" fg:w="31"/><text x="54.4016%" y="127.50"></text></g><g><title>ecs-bench`DYLD-STUB$$memset (13 samples, 0.26%)</title><rect x="57.4007%" y="165" width="0.2607%" height="15" fill="rgb(239,60,40)" fg:x="2862" fg:w="13"/><text x="57.6507%" y="175.50"></text></g><g><title>ecs-bench`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (15 samples, 0.30%)</title><rect x="61.5323%" y="117" width="0.3008%" height="15" fill="rgb(206,27,48)" fg:x="3068" fg:w="15"/><text x="61.7823%" y="127.50"></text></g><g><title>ecs-bench`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (120 samples, 2.41%)</title><rect x="59.9679%" y="149" width="2.4067%" height="15" fill="rgb(225,35,8)" fg:x="2990" fg:w="120"/><text x="60.2179%" y="159.50">ec..</text></g><g><title>ecs-bench`alloc::sync::Arc&lt;T&gt;::inner (67 samples, 1.34%)</title><rect x="61.0309%" y="133" width="1.3438%" height="15" fill="rgb(250,213,24)" fg:x="3043" fg:w="67"/><text x="61.2809%" y="143.50"></text></g><g><title>ecs-bench`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (27 samples, 0.54%)</title><rect x="61.8331%" y="117" width="0.5415%" height="15" fill="rgb(247,123,22)" fg:x="3083" fg:w="27"/><text x="62.0831%" y="127.50"></text></g><g><title>ecs-bench`&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.66%)</title><rect x="64.1396%" y="133" width="0.6619%" height="15" fill="rgb(231,138,38)" fg:x="3198" fg:w="33"/><text x="64.3896%" y="143.50"></text></g><g><title>ecs-bench`concurrent_queue::full_fence (68 samples, 1.36%)</title><rect x="70.8985%" y="117" width="1.3638%" height="15" fill="rgb(231,145,46)" fg:x="3535" fg:w="68"/><text x="71.1485%" y="127.50"></text></g><g><title>ecs-bench`core::sync::atomic::fence (43 samples, 0.86%)</title><rect x="71.3999%" y="101" width="0.8624%" height="15" fill="rgb(251,118,11)" fg:x="3560" fg:w="43"/><text x="71.6499%" y="111.50"></text></g><g><title>ecs-bench`core::sync::atomic::AtomicPtr&lt;T&gt;::load (128 samples, 2.57%)</title><rect x="72.2623%" y="117" width="2.5672%" height="15" fill="rgb(217,147,25)" fg:x="3603" fg:w="128"/><text x="72.5123%" y="127.50">ec..</text></g><g><title>ecs-bench`core::sync::atomic::atomic_load (49 samples, 0.98%)</title><rect x="73.8468%" y="101" width="0.9828%" height="15" fill="rgb(247,81,37)" fg:x="3682" fg:w="49"/><text x="74.0968%" y="111.50"></text></g><g><title>ecs-bench`concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (905 samples, 18.15%)</title><rect x="62.3746%" y="149" width="18.1508%" height="15" fill="rgb(209,12,38)" fg:x="3110" fg:w="905"/><text x="62.6246%" y="159.50">ecs-bench`concurrent_queue::..</text></g><g><title>ecs-bench`concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (784 samples, 15.72%)</title><rect x="64.8014%" y="133" width="15.7240%" height="15" fill="rgb(227,1,9)" fg:x="3231" fg:w="784"/><text x="65.0514%" y="143.50">ecs-bench`concurrent_que..</text></g><g><title>ecs-bench`core::sync::atomic::AtomicUsize::load (284 samples, 5.70%)</title><rect x="74.8295%" y="117" width="5.6959%" height="15" fill="rgb(248,47,43)" fg:x="3731" fg:w="284"/><text x="75.0795%" y="127.50">ecs-ben..</text></g><g><title>ecs-bench`core::sync::atomic::atomic_load (168 samples, 3.37%)</title><rect x="77.1560%" y="101" width="3.3694%" height="15" fill="rgb(221,10,30)" fg:x="3847" fg:w="168"/><text x="77.4060%" y="111.50">ecs..</text></g><g><title>ecs-bench`async_channel::Receiver&lt;T&gt;::try_recv (1,168 samples, 23.43%)</title><rect x="57.6615%" y="165" width="23.4256%" height="15" fill="rgb(210,229,1)" fg:x="2875" fg:w="1168"/><text x="57.9115%" y="175.50">ecs-bench`async_channel::Receiver&lt;T&gt;:..</text></g><g><title>ecs-bench`concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (28 samples, 0.56%)</title><rect x="80.5255%" y="149" width="0.5616%" height="15" fill="rgb(222,148,37)" fg:x="4015" fg:w="28"/><text x="80.7755%" y="159.50"></text></g><g><title>ecs-bench`core::ptr::drop_in_place&lt;core::option::Option&lt;(apecs::core::ResourceId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Sync+core::marker::Send&gt;)&gt;&gt; (24 samples, 0.48%)</title><rect x="81.0870%" y="165" width="0.4813%" height="15" fill="rgb(234,67,33)" fg:x="4043" fg:w="24"/><text x="81.3370%" y="175.50"></text></g><g><title>ecs-bench`core::result::Result&lt;T,E&gt;::ok (107 samples, 2.15%)</title><rect x="81.5684%" y="165" width="2.1460%" height="15" fill="rgb(247,98,35)" fg:x="4067" fg:w="107"/><text x="81.8184%" y="175.50">e..</text></g><g><title>ecs-bench`hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (43 samples, 0.86%)</title><rect x="84.8977%" y="133" width="0.8624%" height="15" fill="rgb(247,138,52)" fg:x="4233" fg:w="43"/><text x="85.1477%" y="143.50"></text></g><g><title>ecs-bench`std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (116 samples, 2.33%)</title><rect x="83.7144%" y="165" width="2.3265%" height="15" fill="rgb(213,79,30)" fg:x="4174" fg:w="116"/><text x="83.9644%" y="175.50">e..</text></g><g><title>ecs-bench`hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (99 samples, 1.99%)</title><rect x="84.0554%" y="149" width="1.9856%" height="15" fill="rgb(246,177,23)" fg:x="4191" fg:w="99"/><text x="84.3054%" y="159.50">e..</text></g><g><title>ecs-bench`hashbrown::raw::RawTable&lt;T,A&gt;::len (14 samples, 0.28%)</title><rect x="85.7601%" y="133" width="0.2808%" height="15" fill="rgb(230,62,27)" fg:x="4276" fg:w="14"/><text x="86.0101%" y="143.50"></text></g><g><title>ecs-bench`apecs::world::clear_returned_resources (1,658 samples, 33.25%)</title><rect x="54.7734%" y="181" width="33.2531%" height="15" fill="rgb(216,154,8)" fg:x="2731" fg:w="1658"/><text x="55.0234%" y="191.50">ecs-bench`apecs::world::clear_returned_resources</text></g><g><title>libsystem_platform.dylib`_platform_memset (99 samples, 1.99%)</title><rect x="86.0409%" y="165" width="1.9856%" height="15" fill="rgb(244,35,45)" fg:x="4290" fg:w="99"/><text x="86.2909%" y="175.50">l..</text></g><g><title>ecs-bench`apecs::world::World::tick_with_context (4,205 samples, 84.34%)</title><rect x="5.9166%" y="197" width="84.3361%" height="15" fill="rgb(251,115,12)" fg:x="295" fg:w="4205"/><text x="6.1666%" y="207.50">ecs-bench`apecs::world::World::tick_with_context</text></g><g><title>ecs-bench`core::sync::atomic::AtomicUsize::load (111 samples, 2.23%)</title><rect x="88.0265%" y="181" width="2.2262%" height="15" fill="rgb(240,54,50)" fg:x="4389" fg:w="111"/><text x="88.2765%" y="191.50">e..</text></g><g><title>ecs-bench`core::sync::atomic::atomic_load (63 samples, 1.26%)</title><rect x="88.9892%" y="165" width="1.2635%" height="15" fill="rgb(233,84,52)" fg:x="4437" fg:w="63"/><text x="89.2392%" y="175.50"></text></g><g><title>ecs-bench`apecs::world::clear_returned_resources (23 samples, 0.46%)</title><rect x="90.2527%" y="197" width="0.4613%" height="15" fill="rgb(207,117,47)" fg:x="4500" fg:w="23"/><text x="90.5027%" y="207.50"></text></g><g><title>ecs-bench`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (10 samples, 0.20%)</title><rect x="91.2154%" y="165" width="0.2006%" height="15" fill="rgb(249,43,39)" fg:x="4548" fg:w="10"/><text x="91.4654%" y="175.50"></text></g><g><title>ecs-bench`&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (40 samples, 0.80%)</title><rect x="90.8744%" y="181" width="0.8022%" height="15" fill="rgb(209,38,44)" fg:x="4531" fg:w="40"/><text x="91.1244%" y="191.50"></text></g><g><title>ecs-bench`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (13 samples, 0.26%)</title><rect x="91.4160%" y="165" width="0.2607%" height="15" fill="rgb(236,212,23)" fg:x="4558" fg:w="13"/><text x="91.6660%" y="175.50"></text></g><g><title>ecs-bench`core::cmp::PartialOrd::lt (53 samples, 1.06%)</title><rect x="90.7140%" y="197" width="1.0630%" height="15" fill="rgb(242,79,21)" fg:x="4523" fg:w="53"/><text x="90.9640%" y="207.50"></text></g><g><title>ecs-bench`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (5 samples, 0.10%)</title><rect x="91.6767%" y="181" width="0.1003%" height="15" fill="rgb(211,96,35)" fg:x="4571" fg:w="5"/><text x="91.9267%" y="191.50"></text></g><g><title>ecs-bench`core::option::Option&lt;T&gt;::as_mut (53 samples, 1.06%)</title><rect x="91.7770%" y="197" width="1.0630%" height="15" fill="rgb(253,215,40)" fg:x="4576" fg:w="53"/><text x="92.0270%" y="207.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="92.8400%" y="53" width="0.0201%" height="15" fill="rgb(211,81,21)" fg:x="4629" fg:w="1"/><text x="93.0900%" y="63.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="92.8400%" y="37" width="0.0201%" height="15" fill="rgb(208,190,38)" fg:x="4629" fg:w="1"/><text x="93.0900%" y="47.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.04%)</title><rect x="92.8400%" y="85" width="0.0401%" height="15" fill="rgb(235,213,38)" fg:x="4629" fg:w="2"/><text x="93.0900%" y="95.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.04%)</title><rect x="92.8400%" y="69" width="0.0401%" height="15" fill="rgb(237,122,38)" fg:x="4629" fg:w="2"/><text x="93.0900%" y="79.50"></text></g><g><title>ecs-bench`core::slice::raw::from_raw_parts_mut (1 samples, 0.02%)</title><rect x="92.8600%" y="53" width="0.0201%" height="15" fill="rgb(244,218,35)" fg:x="4630" fg:w="1"/><text x="93.1100%" y="63.50"></text></g><g><title>ecs-bench`hibitset::BitSet::add (3 samples, 0.06%)</title><rect x="92.8801%" y="85" width="0.0602%" height="15" fill="rgb(240,68,47)" fg:x="4631" fg:w="3"/><text x="93.1301%" y="95.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.06%)</title><rect x="92.8801%" y="69" width="0.0602%" height="15" fill="rgb(210,16,53)" fg:x="4631" fg:w="3"/><text x="93.1301%" y="79.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="92.9202%" y="53" width="0.0201%" height="15" fill="rgb(235,124,12)" fg:x="4633" fg:w="1"/><text x="93.1702%" y="63.50"></text></g><g><title>ecs-bench`core::slice::raw::from_raw_parts (1 samples, 0.02%)</title><rect x="92.9202%" y="37" width="0.0201%" height="15" fill="rgb(224,169,11)" fg:x="4633" fg:w="1"/><text x="93.1702%" y="47.50"></text></g><g><title>ecs-bench`&lt;apecs::core::Write&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::insert (6 samples, 0.12%)</title><rect x="92.8400%" y="117" width="0.1203%" height="15" fill="rgb(250,166,2)" fg:x="4629" fg:w="6"/><text x="93.0900%" y="127.50"></text></g><g><title>ecs-bench`&lt;apecs::storage::vec::VecStorage&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::insert (6 samples, 0.12%)</title><rect x="92.8400%" y="101" width="0.1203%" height="15" fill="rgb(242,216,29)" fg:x="4629" fg:w="6"/><text x="93.0900%" y="111.50"></text></g><g><title>ecs-bench`hibitset::BitSet::contains (1 samples, 0.02%)</title><rect x="92.9402%" y="85" width="0.0201%" height="15" fill="rgb(230,116,27)" fg:x="4634" fg:w="1"/><text x="93.1902%" y="95.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.9402%" y="69" width="0.0201%" height="15" fill="rgb(228,99,48)" fg:x="4634" fg:w="1"/><text x="93.1902%" y="79.50"></text></g><g><title>ecs-bench`cgmath::matrix::Matrix4&lt;S&gt;::from_scale (2 samples, 0.04%)</title><rect x="92.9603%" y="117" width="0.0401%" height="15" fill="rgb(253,11,6)" fg:x="4635" fg:w="2"/><text x="93.2103%" y="127.50"></text></g><g><title>ecs-bench`cgmath::matrix::Matrix4&lt;S&gt;::from_nonuniform_scale (2 samples, 0.04%)</title><rect x="92.9603%" y="101" width="0.0401%" height="15" fill="rgb(247,143,39)" fg:x="4635" fg:w="2"/><text x="93.2103%" y="111.50"></text></g><g><title>ecs-bench`cgmath::matrix::Matrix4&lt;S&gt;::from_cols (1 samples, 0.02%)</title><rect x="92.9803%" y="85" width="0.0201%" height="15" fill="rgb(236,97,10)" fg:x="4636" fg:w="1"/><text x="93.2303%" y="95.50"></text></g><g><title>ecs-bench`ecs_bench::new (9 samples, 0.18%)</title><rect x="92.8400%" y="197" width="0.1805%" height="15" fill="rgb(233,208,19)" fg:x="4629" fg:w="9"/><text x="93.0900%" y="207.50"></text></g><g><title>ecs-bench`core::iter::traits::iterator::Iterator::for_each (9 samples, 0.18%)</title><rect x="92.8400%" y="181" width="0.1805%" height="15" fill="rgb(216,164,2)" fg:x="4629" fg:w="9"/><text x="93.0900%" y="191.50"></text></g><g><title>ecs-bench`core::iter::traits::iterator::Iterator::fold (9 samples, 0.18%)</title><rect x="92.8400%" y="165" width="0.1805%" height="15" fill="rgb(220,129,5)" fg:x="4629" fg:w="9"/><text x="93.0900%" y="175.50"></text></g><g><title>ecs-bench`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.18%)</title><rect x="92.8400%" y="149" width="0.1805%" height="15" fill="rgb(242,17,10)" fg:x="4629" fg:w="9"/><text x="93.0900%" y="159.50"></text></g><g><title>ecs-bench`ecs_bench::new::_{{closure}} (9 samples, 0.18%)</title><rect x="92.8400%" y="133" width="0.1805%" height="15" fill="rgb(242,107,0)" fg:x="4629" fg:w="9"/><text x="93.0900%" y="143.50"></text></g><g><title>ecs-bench`cgmath::vector::Vector3&lt;S&gt;::unit_x (1 samples, 0.02%)</title><rect x="93.0004%" y="117" width="0.0201%" height="15" fill="rgb(251,28,31)" fg:x="4637" fg:w="1"/><text x="93.2504%" y="127.50"></text></g><g><title>ecs-bench`std::time::Instant::elapsed (13 samples, 0.26%)</title><rect x="93.0205%" y="197" width="0.2607%" height="15" fill="rgb(233,223,10)" fg:x="4638" fg:w="13"/><text x="93.2705%" y="207.50"></text></g><g><title>ecs-bench`ecs_bench::main (4,914 samples, 98.56%)</title><rect x="1.2034%" y="213" width="98.5560%" height="15" fill="rgb(215,21,27)" fg:x="60" fg:w="4914"/><text x="1.4534%" y="223.50">ecs-bench`ecs_bench::main</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (323 samples, 6.48%)</title><rect x="93.2812%" y="197" width="6.4781%" height="15" fill="rgb(232,23,21)" fg:x="4651" fg:w="323"/><text x="93.5312%" y="207.50">libsyste..</text></g><g><title>dyld`start (4,985 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9799%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>ecs-bench`main (4,985 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9799%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="319.50">ecs-bench`main</text></g><g><title>ecs-bench`std::rt::lang_start (4,985 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9799%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="303.50">ecs-bench`std::rt::lang_start</text></g><g><title>ecs-bench`std::rt::lang_start_internal (4,985 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9799%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="287.50">ecs-bench`std::rt::lang_start_internal</text></g><g><title>ecs-bench`std::rt::lang_start::_{{closure}} (4,985 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9799%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="271.50">ecs-bench`std::rt::lang_start::_{{closure}}</text></g><g><title>ecs-bench`std::sys_common::backtrace::__rust_begin_short_backtrace (4,985 samples, 99.98%)</title><rect x="0.0000%" y="245" width="99.9799%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="255.50">ecs-bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ecs-bench`core::ops::function::FnOnce::call_once (4,985 samples, 99.98%)</title><rect x="0.0000%" y="229" width="99.9799%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="4985"/><text x="0.2500%" y="239.50">ecs-bench`core::ops::function::FnOnce::call_once</text></g><g><title>ecs-bench`std::time::Instant::elapsed (11 samples, 0.22%)</title><rect x="99.7593%" y="213" width="0.2206%" height="15" fill="rgb(241,108,4)" fg:x="4974" fg:w="11"/><text x="100.0093%" y="223.50"></text></g><g><title>all (4,986 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="4986"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="99.9799%" y="325" width="0.0201%" height="15" fill="rgb(224,114,35)" fg:x="4985" fg:w="1"/><text x="100.2299%" y="335.50"></text></g></svg></svg>