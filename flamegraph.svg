<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="837.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="10208"><g><title>benchmark-4b441f3e4652afcb`&lt;criterion::Criterion as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.0000%" y="661" width="0.0196%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>benchmark-4b441f3e4652afcb`criterion::html::Html::new (2 samples, 0.02%)</title><rect x="0.0000%" y="645" width="0.0196%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::TinyTemplate::add_template (2 samples, 0.02%)</title><rect x="0.0000%" y="629" width="0.0196%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::template::Template::compile (2 samples, 0.02%)</title><rect x="0.0000%" y="613" width="0.0196%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::compiler::TemplateCompiler::compile (2 samples, 0.02%)</title><rect x="0.0000%" y="597" width="0.0196%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::compiler::TemplateCompiler::consume_block (2 samples, 0.02%)</title><rect x="0.0000%" y="581" width="0.0196%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="591.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;criterion::Criterion as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.0196%" y="645" width="0.0196%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="2"/><text x="0.2696%" y="655.50"></text></g><g><title>benchmark-4b441f3e4652afcb`criterion::html::Html::new (2 samples, 0.02%)</title><rect x="0.0196%" y="629" width="0.0196%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="2"/><text x="0.2696%" y="639.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::TinyTemplate::add_template (2 samples, 0.02%)</title><rect x="0.0196%" y="613" width="0.0196%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="2"/><text x="0.2696%" y="623.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::template::Template::compile (2 samples, 0.02%)</title><rect x="0.0196%" y="597" width="0.0196%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="2"/><text x="0.2696%" y="607.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::compiler::TemplateCompiler::compile (2 samples, 0.02%)</title><rect x="0.0196%" y="581" width="0.0196%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="2"/><text x="0.2696%" y="591.50"></text></g><g><title>benchmark-4b441f3e4652afcb`tinytemplate::compiler::TemplateCompiler::consume_block (2 samples, 0.02%)</title><rect x="0.0196%" y="565" width="0.0196%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="2"/><text x="0.2696%" y="575.50"></text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::bench_add_remove (2 samples, 0.02%)</title><rect x="0.0490%" y="645" width="0.0196%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="2"/><text x="0.2990%" y="655.50"></text></g><g><title>benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (2 samples, 0.02%)</title><rect x="0.0490%" y="629" width="0.0196%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="0.2990%" y="639.50"></text></g><g><title>benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (2 samples, 0.02%)</title><rect x="0.0490%" y="613" width="0.0196%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="0.2990%" y="623.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Write&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::insert (7 samples, 0.07%)</title><rect x="0.0980%" y="293" width="0.0686%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="7"/><text x="0.3480%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorage&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::insert (7 samples, 0.07%)</title><rect x="0.0980%" y="277" width="0.0686%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="7"/><text x="0.3480%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hibitset::BitSet::contains (5 samples, 0.05%)</title><rect x="0.1176%" y="261" width="0.0490%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="5"/><text x="0.3676%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="0.1469%" y="245" width="0.0196%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="2"/><text x="0.3969%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::entities::Entities::create (3 samples, 0.03%)</title><rect x="0.1763%" y="293" width="0.0294%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="3"/><text x="0.4263%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hibitset::BitSet::add (3 samples, 0.03%)</title><rect x="0.1763%" y="277" width="0.0294%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="3"/><text x="0.4263%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="0.1861%" y="261" width="0.0196%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="2"/><text x="0.4361%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.02%)</title><rect x="0.1861%" y="245" width="0.0196%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="2"/><text x="0.4361%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::new (14 samples, 0.14%)</title><rect x="0.0784%" y="373" width="0.1371%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="14"/><text x="0.3284%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each (13 samples, 0.13%)</title><rect x="0.0882%" y="357" width="0.1274%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="13"/><text x="0.3382%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::fold (13 samples, 0.13%)</title><rect x="0.0882%" y="341" width="0.1274%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="13"/><text x="0.3382%" y="351.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (12 samples, 0.12%)</title><rect x="0.0980%" y="325" width="0.1176%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="12"/><text x="0.3480%" y="335.50"></text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::new::_{{closure}} (12 samples, 0.12%)</title><rect x="0.0980%" y="309" width="0.1176%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="12"/><text x="0.3480%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.2253%" y="245" width="0.0196%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="2"/><text x="0.4753%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::RandomState::new (2 samples, 0.02%)</title><rect x="0.2253%" y="229" width="0.0196%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="2"/><text x="0.4753%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.2253%" y="213" width="0.0196%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="2"/><text x="0.4753%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="0.2253%" y="197" width="0.0196%" height="15" fill="rgb(229,88,8)" fg:x="23" fg:w="2"/><text x="0.4753%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::schedule::BatchData as core::default::Default&gt;::default (3 samples, 0.03%)</title><rect x="0.2253%" y="277" width="0.0294%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="3"/><text x="0.4753%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (3 samples, 0.03%)</title><rect x="0.2253%" y="261" width="0.0294%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="3"/><text x="0.4753%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each (3 samples, 0.03%)</title><rect x="0.2743%" y="245" width="0.0294%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="3"/><text x="0.5243%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::fold (3 samples, 0.03%)</title><rect x="0.2743%" y="229" width="0.0294%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="3"/><text x="0.5243%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.03%)</title><rect x="0.2743%" y="213" width="0.0294%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="3"/><text x="0.5243%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (3 samples, 0.03%)</title><rect x="0.2743%" y="197" width="0.0294%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="3"/><text x="0.5243%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.03%)</title><rect x="0.2743%" y="181" width="0.0294%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="3"/><text x="0.5243%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.02%)</title><rect x="0.2841%" y="165" width="0.0196%" height="15" fill="rgb(232,182,51)" fg:x="29" fg:w="2"/><text x="0.5341%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (2 samples, 0.02%)</title><rect x="0.2841%" y="149" width="0.0196%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="2"/><text x="0.5341%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.07%)</title><rect x="0.2743%" y="277" width="0.0686%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="7"/><text x="0.5243%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.07%)</title><rect x="0.2743%" y="261" width="0.0686%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="7"/><text x="0.5243%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.04%)</title><rect x="0.3037%" y="245" width="0.0392%" height="15" fill="rgb(213,116,39)" fg:x="31" fg:w="4"/><text x="0.5537%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="0.3037%" y="229" width="0.0392%" height="15" fill="rgb(222,207,29)" fg:x="31" fg:w="4"/><text x="0.5537%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.03%)</title><rect x="0.3135%" y="213" width="0.0294%" height="15" fill="rgb(206,96,30)" fg:x="32" fg:w="3"/><text x="0.5635%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.3625%" y="261" width="0.0196%" height="15" fill="rgb(218,138,4)" fg:x="37" fg:w="2"/><text x="0.6125%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::sync::Arc&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="0.3821%" y="261" width="0.0294%" height="15" fill="rgb(250,191,14)" fg:x="39" fg:w="3"/><text x="0.6321%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::alloc::exchange_malloc (3 samples, 0.03%)</title><rect x="0.3821%" y="245" width="0.0294%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="3"/><text x="0.6321%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="0.3821%" y="229" width="0.0294%" height="15" fill="rgb(206,27,48)" fg:x="39" fg:w="3"/><text x="0.6321%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="0.3821%" y="213" width="0.0294%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="3"/><text x="0.6321%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="0.4310%" y="165" width="0.0196%" height="15" fill="rgb(250,213,24)" fg:x="44" fg:w="2"/><text x="0.6810%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="0.4310%" y="197" width="0.0392%" height="15" fill="rgb(247,123,22)" fg:x="44" fg:w="4"/><text x="0.6810%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.04%)</title><rect x="0.4310%" y="181" width="0.0392%" height="15" fill="rgb(231,138,38)" fg:x="44" fg:w="4"/><text x="0.6810%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="0.4506%" y="165" width="0.0196%" height="15" fill="rgb(231,145,46)" fg:x="46" fg:w="2"/><text x="0.7006%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_insert_hash (8 samples, 0.08%)</title><rect x="0.4114%" y="229" width="0.0784%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="8"/><text x="0.6614%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (8 samples, 0.08%)</title><rect x="0.4114%" y="213" width="0.0784%" height="15" fill="rgb(217,147,25)" fg:x="42" fg:w="8"/><text x="0.6614%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="0.4702%" y="197" width="0.0196%" height="15" fill="rgb(247,81,37)" fg:x="48" fg:w="2"/><text x="0.7202%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::ResourceId as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.4702%" y="181" width="0.0196%" height="15" fill="rgb(209,12,38)" fg:x="48" fg:w="2"/><text x="0.7202%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="0.4702%" y="165" width="0.0196%" height="15" fill="rgb(227,1,9)" fg:x="48" fg:w="2"/><text x="0.7202%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.02%)</title><rect x="0.4702%" y="149" width="0.0196%" height="15" fill="rgb(248,47,43)" fg:x="48" fg:w="2"/><text x="0.7202%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::Hasher::write_u64 (2 samples, 0.02%)</title><rect x="0.4702%" y="133" width="0.0196%" height="15" fill="rgb(221,10,30)" fg:x="48" fg:w="2"/><text x="0.7202%" y="143.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="0.4702%" y="117" width="0.0196%" height="15" fill="rgb(210,229,1)" fg:x="48" fg:w="2"/><text x="0.7202%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="0.4702%" y="101" width="0.0196%" height="15" fill="rgb(222,148,37)" fg:x="48" fg:w="2"/><text x="0.7202%" y="111.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="0.4702%" y="85" width="0.0196%" height="15" fill="rgb(234,67,33)" fg:x="48" fg:w="2"/><text x="0.7202%" y="95.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.03%)</title><rect x="0.4898%" y="229" width="0.0294%" height="15" fill="rgb(247,98,35)" fg:x="50" fg:w="3"/><text x="0.7398%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="0.4898%" y="213" width="0.0294%" height="15" fill="rgb(247,138,52)" fg:x="50" fg:w="3"/><text x="0.7398%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.03%)</title><rect x="0.4898%" y="197" width="0.0294%" height="15" fill="rgb(213,79,30)" fg:x="50" fg:w="3"/><text x="0.7398%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="0.5388%" y="213" width="0.0392%" height="15" fill="rgb(246,177,23)" fg:x="55" fg:w="4"/><text x="0.7888%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.04%)</title><rect x="0.5388%" y="197" width="0.0392%" height="15" fill="rgb(230,62,27)" fg:x="55" fg:w="4"/><text x="0.7888%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (3 samples, 0.03%)</title><rect x="0.5486%" y="181" width="0.0294%" height="15" fill="rgb(216,154,8)" fg:x="56" fg:w="3"/><text x="0.7986%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3 samples, 0.03%)</title><rect x="0.5486%" y="165" width="0.0294%" height="15" fill="rgb(244,35,45)" fg:x="56" fg:w="3"/><text x="0.7986%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.02%)</title><rect x="0.5584%" y="149" width="0.0196%" height="15" fill="rgb(251,115,12)" fg:x="57" fg:w="2"/><text x="0.8084%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (20 samples, 0.20%)</title><rect x="0.4114%" y="261" width="0.1959%" height="15" fill="rgb(240,54,50)" fg:x="42" fg:w="20"/><text x="0.6614%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.20%)</title><rect x="0.4114%" y="245" width="0.1959%" height="15" fill="rgb(233,84,52)" fg:x="42" fg:w="20"/><text x="0.6614%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.09%)</title><rect x="0.5192%" y="229" width="0.0882%" height="15" fill="rgb(207,117,47)" fg:x="53" fg:w="9"/><text x="0.7692%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (2 samples, 0.02%)</title><rect x="0.5878%" y="213" width="0.0196%" height="15" fill="rgb(249,43,39)" fg:x="60" fg:w="2"/><text x="0.8378%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="0.6074%" y="213" width="0.0196%" height="15" fill="rgb(209,38,44)" fg:x="62" fg:w="2"/><text x="0.8574%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="0.6074%" y="197" width="0.0196%" height="15" fill="rgb(236,212,23)" fg:x="62" fg:w="2"/><text x="0.8574%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="0.6270%" y="197" width="0.0196%" height="15" fill="rgb(242,79,21)" fg:x="64" fg:w="2"/><text x="0.8770%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.02%)</title><rect x="0.6270%" y="181" width="0.0196%" height="15" fill="rgb(211,96,35)" fg:x="64" fg:w="2"/><text x="0.8770%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::try_take_resources (32 samples, 0.31%)</title><rect x="0.3527%" y="277" width="0.3135%" height="15" fill="rgb(253,215,40)" fg:x="36" fg:w="32"/><text x="0.6027%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (6 samples, 0.06%)</title><rect x="0.6074%" y="261" width="0.0588%" height="15" fill="rgb(211,81,21)" fg:x="62" fg:w="6"/><text x="0.8574%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (6 samples, 0.06%)</title><rect x="0.6074%" y="245" width="0.0588%" height="15" fill="rgb(208,190,38)" fg:x="62" fg:w="6"/><text x="0.8574%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (6 samples, 0.06%)</title><rect x="0.6074%" y="229" width="0.0588%" height="15" fill="rgb(235,213,38)" fg:x="62" fg:w="6"/><text x="0.8574%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (4 samples, 0.04%)</title><rect x="0.6270%" y="213" width="0.0392%" height="15" fill="rgb(237,122,38)" fg:x="64" fg:w="4"/><text x="0.8770%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.02%)</title><rect x="0.6466%" y="197" width="0.0196%" height="15" fill="rgb(244,218,35)" fg:x="66" fg:w="2"/><text x="0.8966%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (2 samples, 0.02%)</title><rect x="0.6466%" y="181" width="0.0196%" height="15" fill="rgb(240,68,47)" fg:x="66" fg:w="2"/><text x="0.8966%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::prepare_batch_data (46 samples, 0.45%)</title><rect x="0.2253%" y="293" width="0.4506%" height="15" fill="rgb(210,16,53)" fg:x="23" fg:w="46"/><text x="0.4753%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="0.6759%" y="277" width="0.0196%" height="15" fill="rgb(235,124,12)" fg:x="69" fg:w="2"/><text x="0.9259%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`async_channel::Receiver&lt;T&gt;::try_recv (5 samples, 0.05%)</title><rect x="0.7249%" y="261" width="0.0490%" height="15" fill="rgb(224,169,11)" fg:x="74" fg:w="5"/><text x="0.9749%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4 samples, 0.04%)</title><rect x="0.7347%" y="245" width="0.0392%" height="15" fill="rgb(250,166,2)" fg:x="75" fg:w="4"/><text x="0.9847%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (4 samples, 0.04%)</title><rect x="0.7347%" y="229" width="0.0392%" height="15" fill="rgb(242,216,29)" fg:x="75" fg:w="4"/><text x="0.9847%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.7739%" y="245" width="0.0196%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="2"/><text x="1.0239%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="0.7739%" y="229" width="0.0196%" height="15" fill="rgb(228,99,48)" fg:x="79" fg:w="2"/><text x="1.0239%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::RandomState::new (2 samples, 0.02%)</title><rect x="0.7739%" y="213" width="0.0196%" height="15" fill="rgb(253,11,6)" fg:x="79" fg:w="2"/><text x="1.0239%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="0.7739%" y="197" width="0.0196%" height="15" fill="rgb(247,143,39)" fg:x="79" fg:w="2"/><text x="1.0239%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="0.7739%" y="181" width="0.0196%" height="15" fill="rgb(236,97,10)" fg:x="79" fg:w="2"/><text x="1.0239%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::mem::take (3 samples, 0.03%)</title><rect x="0.7739%" y="261" width="0.0294%" height="15" fill="rgb(233,208,19)" fg:x="79" fg:w="3"/><text x="1.0239%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="0.8033%" y="197" width="0.0196%" height="15" fill="rgb(216,164,2)" fg:x="82" fg:w="2"/><text x="1.0533%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="0.8033%" y="181" width="0.0196%" height="15" fill="rgb(220,129,5)" fg:x="82" fg:w="2"/><text x="1.0533%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="0.8033%" y="165" width="0.0196%" height="15" fill="rgb(242,17,10)" fg:x="82" fg:w="2"/><text x="1.0533%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_insert_hash (4 samples, 0.04%)</title><rect x="0.8033%" y="229" width="0.0392%" height="15" fill="rgb(242,107,0)" fg:x="82" fg:w="4"/><text x="1.0533%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="0.8033%" y="213" width="0.0392%" height="15" fill="rgb(251,28,31)" fg:x="82" fg:w="4"/><text x="1.0533%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.04%)</title><rect x="0.8425%" y="229" width="0.0392%" height="15" fill="rgb(233,223,10)" fg:x="86" fg:w="4"/><text x="1.0925%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.04%)</title><rect x="0.8425%" y="213" width="0.0392%" height="15" fill="rgb(215,21,27)" fg:x="86" fg:w="4"/><text x="1.0925%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.04%)</title><rect x="0.8425%" y="197" width="0.0392%" height="15" fill="rgb(232,23,21)" fg:x="86" fg:w="4"/><text x="1.0925%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::clear_returned_resources (23 samples, 0.23%)</title><rect x="0.6955%" y="277" width="0.2253%" height="15" fill="rgb(244,5,23)" fg:x="71" fg:w="23"/><text x="0.9455%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (12 samples, 0.12%)</title><rect x="0.8033%" y="261" width="0.1176%" height="15" fill="rgb(226,81,46)" fg:x="82" fg:w="12"/><text x="1.0533%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.12%)</title><rect x="0.8033%" y="245" width="0.1176%" height="15" fill="rgb(247,70,30)" fg:x="82" fg:w="12"/><text x="1.0533%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.04%)</title><rect x="0.8817%" y="229" width="0.0392%" height="15" fill="rgb(212,68,19)" fg:x="90" fg:w="4"/><text x="1.1317%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (3 samples, 0.03%)</title><rect x="0.8915%" y="213" width="0.0294%" height="15" fill="rgb(240,187,13)" fg:x="91" fg:w="3"/><text x="1.1415%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (3 samples, 0.03%)</title><rect x="0.8915%" y="197" width="0.0294%" height="15" fill="rgb(223,113,26)" fg:x="91" fg:w="3"/><text x="1.1415%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="0.9208%" y="245" width="0.0294%" height="15" fill="rgb(206,192,2)" fg:x="94" fg:w="3"/><text x="1.1708%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="0.9306%" y="229" width="0.0196%" height="15" fill="rgb(241,108,4)" fg:x="95" fg:w="2"/><text x="1.1806%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Read&lt;T&gt; as apecs::core::CanFetch&gt;::construct (2 samples, 0.02%)</title><rect x="0.9502%" y="149" width="0.0196%" height="15" fill="rgb(247,173,49)" fg:x="97" fg:w="2"/><text x="1.2002%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.02%)</title><rect x="0.9502%" y="133" width="0.0196%" height="15" fill="rgb(224,114,35)" fg:x="97" fg:w="2"/><text x="1.2002%" y="143.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.02%)</title><rect x="0.9502%" y="117" width="0.0196%" height="15" fill="rgb(245,159,27)" fg:x="97" fg:w="2"/><text x="1.2002%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.02%)</title><rect x="0.9502%" y="101" width="0.0196%" height="15" fill="rgb(245,172,44)" fg:x="97" fg:w="2"/><text x="1.2002%" y="111.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="0.9698%" y="53" width="0.0196%" height="15" fill="rgb(236,23,11)" fg:x="99" fg:w="2"/><text x="1.2198%" y="63.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="0.9698%" y="37" width="0.0196%" height="15" fill="rgb(205,117,38)" fg:x="99" fg:w="2"/><text x="1.2198%" y="47.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_hash (3 samples, 0.03%)</title><rect x="0.9698%" y="85" width="0.0294%" height="15" fill="rgb(237,72,25)" fg:x="99" fg:w="3"/><text x="1.2198%" y="95.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="0.9698%" y="69" width="0.0294%" height="15" fill="rgb(244,70,9)" fg:x="99" fg:w="3"/><text x="1.2198%" y="79.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.05%)</title><rect x="0.9698%" y="101" width="0.0490%" height="15" fill="rgb(217,125,39)" fg:x="99" fg:w="5"/><text x="1.2198%" y="111.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.02%)</title><rect x="0.9992%" y="85" width="0.0196%" height="15" fill="rgb(235,36,10)" fg:x="102" fg:w="2"/><text x="1.2492%" y="95.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Write&lt;T&gt; as apecs::core::CanFetch&gt;::construct (6 samples, 0.06%)</title><rect x="0.9698%" y="149" width="0.0588%" height="15" fill="rgb(251,123,47)" fg:x="99" fg:w="6"/><text x="1.2198%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (6 samples, 0.06%)</title><rect x="0.9698%" y="133" width="0.0588%" height="15" fill="rgb(221,13,13)" fg:x="99" fg:w="6"/><text x="1.2198%" y="143.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (6 samples, 0.06%)</title><rect x="0.9698%" y="117" width="0.0588%" height="15" fill="rgb(238,131,9)" fg:x="99" fg:w="6"/><text x="1.2198%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;benchmark::simple_iter::SimpleIterData&lt;S2,S4&gt; as apecs::core::CanFetch&gt;::construct (9 samples, 0.09%)</title><rect x="0.9502%" y="165" width="0.0882%" height="15" fill="rgb(211,50,8)" fg:x="97" fg:w="9"/><text x="1.2002%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::join::JoinedIter&lt;(A,B)&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.88%)</title><rect x="1.0384%" y="149" width="0.8817%" height="15" fill="rgb(245,182,24)" fg:x="106" fg:w="90"/><text x="1.2884%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;cgmath::vector::Vector3&lt;S&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.02%)</title><rect x="1.9201%" y="149" width="0.0196%" height="15" fill="rgb(242,14,37)" fg:x="196" fg:w="2"/><text x="2.1701%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::storage::Entry&lt;T&gt;::as_ref (86 samples, 0.84%)</title><rect x="19.6023%" y="85" width="0.8425%" height="15" fill="rgb(246,228,12)" fg:x="2001" fg:w="86"/><text x="19.8523%" y="95.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorageIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,129 samples, 11.06%)</title><rect x="11.5204%" y="117" width="11.0600%" height="15" fill="rgb(213,55,15)" fg:x="1176" fg:w="1129"/><text x="11.7704%" y="127.50">benchmark-4b441f..</text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::map (612 samples, 6.00%)</title><rect x="16.5850%" y="101" width="5.9953%" height="15" fill="rgb(209,9,3)" fg:x="1693" fg:w="612"/><text x="16.8350%" y="111.50">benchmar..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ops::function::FnOnce::call_once (218 samples, 2.14%)</title><rect x="20.4447%" y="85" width="2.1356%" height="15" fill="rgb(230,59,30)" fg:x="2087" fg:w="218"/><text x="20.6947%" y="95.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (174 samples, 1.70%)</title><rect x="36.7359%" y="85" width="1.7045%" height="15" fill="rgb(209,121,21)" fg:x="3750" fg:w="174"/><text x="36.9859%" y="95.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,371 samples, 13.43%)</title><rect x="28.3307%" y="101" width="13.4306%" height="15" fill="rgb(220,109,13)" fg:x="2892" fg:w="1371"/><text x="28.5807%" y="111.50">benchmark-4b441f3e46..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (339 samples, 3.32%)</title><rect x="38.4404%" y="85" width="3.3209%" height="15" fill="rgb(232,18,1)" fg:x="3924" fg:w="339"/><text x="38.6904%" y="95.50">ben..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (167 samples, 1.64%)</title><rect x="41.7614%" y="101" width="1.6360%" height="15" fill="rgb(215,41,42)" fg:x="4263" fg:w="167"/><text x="42.0114%" y="111.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorageIterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,168 samples, 21.24%)</title><rect x="22.5803%" y="117" width="21.2382%" height="15" fill="rgb(224,123,36)" fg:x="2305" fg:w="2168"/><text x="22.8303%" y="127.50">benchmark-4b441f3e4652afcb`&lt;apecs..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (43 samples, 0.42%)</title><rect x="43.3973%" y="101" width="0.4212%" height="15" fill="rgb(240,125,3)" fg:x="4430" fg:w="43"/><text x="43.6473%" y="111.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (161 samples, 1.58%)</title><rect x="43.8186%" y="117" width="1.5772%" height="15" fill="rgb(205,98,50)" fg:x="4473" fg:w="161"/><text x="44.0686%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::storage::Entry&lt;T&gt;::as_mut (83 samples, 0.81%)</title><rect x="45.3958%" y="117" width="0.8131%" height="15" fill="rgb(205,185,37)" fg:x="4634" fg:w="83"/><text x="45.6458%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::as_mut (230 samples, 2.25%)</title><rect x="46.2089%" y="117" width="2.2531%" height="15" fill="rgb(238,207,15)" fg:x="4717" fg:w="230"/><text x="46.4589%" y="127.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::as_ref (183 samples, 1.79%)</title><rect x="48.4620%" y="117" width="1.7927%" height="15" fill="rgb(213,199,42)" fg:x="4947" fg:w="183"/><text x="48.7120%" y="127.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::join::JoinedIter&lt;(A,B)&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,734 samples, 46.38%)</title><rect x="4.8197%" y="133" width="46.3754%" height="15" fill="rgb(235,201,11)" fg:x="492" fg:w="4734"/><text x="5.0697%" y="143.50">benchmark-4b441f3e4652afcb`&lt;apecs::join::JoinedIter&lt;(A,B)&gt; as core::iter::tr..</text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::is_some (96 samples, 0.94%)</title><rect x="50.2547%" y="117" width="0.9404%" height="15" fill="rgb(207,46,11)" fg:x="5130" fg:w="96"/><text x="50.5047%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::Entry&lt;T&gt; as apecs::storage::StorageComponent&gt;::split (161 samples, 1.58%)</title><rect x="51.1951%" y="133" width="1.5772%" height="15" fill="rgb(241,35,35)" fg:x="5226" fg:w="161"/><text x="51.4451%" y="143.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;cgmath::vector::Vector3&lt;S&gt; as core::ops::arith::AddAssign&gt;::add_assign (186 samples, 1.82%)</title><rect x="52.7723%" y="133" width="1.8221%" height="15" fill="rgb(243,32,47)" fg:x="5387" fg:w="186"/><text x="53.0223%" y="143.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (330 samples, 3.23%)</title><rect x="54.5944%" y="133" width="3.2328%" height="15" fill="rgb(247,202,23)" fg:x="5573" fg:w="330"/><text x="54.8444%" y="143.50">ben..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (242 samples, 2.37%)</title><rect x="57.8272%" y="133" width="2.3707%" height="15" fill="rgb(219,102,11)" fg:x="5903" fg:w="242"/><text x="58.0772%" y="143.50">be..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ops::function::FnMut::call_mut (6,042 samples, 59.19%)</title><rect x="1.0384%" y="165" width="59.1889%" height="15" fill="rgb(243,110,44)" fg:x="106" fg:w="6042"/><text x="1.2884%" y="175.50">benchmark-4b441f3e4652afcb`core::ops::function::FnMut::call_mut</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::sync_run (5,950 samples, 58.29%)</title><rect x="1.9397%" y="149" width="58.2876%" height="15" fill="rgb(222,74,54)" fg:x="198" fg:w="5950"/><text x="2.1897%" y="159.50">benchmark-4b441f3e4652afcb`benchmark::simple_iter::sync_run</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;apecs::core::Write&lt;apecs::storage::vec::VecStorage&lt;benchmark::simple_iter::Position&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="60.2077%" y="133" width="0.0196%" height="15" fill="rgb(216,99,12)" fg:x="6146" fg:w="2"/><text x="60.4577%" y="143.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;apecs::core::Fetched&lt;apecs::storage::vec::VecStorage&lt;benchmark::simple_iter::Position&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="60.2077%" y="117" width="0.0196%" height="15" fill="rgb(226,22,26)" fg:x="6146" fg:w="2"/><text x="60.4577%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnMut&lt;Args&gt;&gt;::call_mut (6,054 samples, 59.31%)</title><rect x="0.9502%" y="197" width="59.3064%" height="15" fill="rgb(217,163,10)" fg:x="97" fg:w="6054"/><text x="1.2002%" y="207.50">benchmark-4b441f3e4652afcb`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnMut&lt;Args&gt;&gt;::call_mut</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::World::with_system::_{{closure}} (6,054 samples, 59.31%)</title><rect x="0.9502%" y="181" width="59.3064%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="6054"/><text x="1.2002%" y="191.50">benchmark-4b441f3e4652afcb`apecs::world::World::with_system::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource&gt;&gt; (3 samples, 0.03%)</title><rect x="60.2273%" y="165" width="0.0294%" height="15" fill="rgb(252,105,26)" fg:x="6148" fg:w="3"/><text x="60.4773%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.03%)</title><rect x="60.2273%" y="149" width="0.0294%" height="15" fill="rgb(220,39,43)" fg:x="6148" fg:w="3"/><text x="60.4773%" y="159.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(apecs::core::ResourceId,apecs::core::FetchReadyResource)&gt;&gt; (3 samples, 0.03%)</title><rect x="60.2273%" y="133" width="0.0294%" height="15" fill="rgb(229,68,48)" fg:x="6148" fg:w="3"/><text x="60.4773%" y="143.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="60.2273%" y="117" width="0.0294%" height="15" fill="rgb(252,8,32)" fg:x="6148" fg:w="3"/><text x="60.4773%" y="127.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="60.2371%" y="101" width="0.0196%" height="15" fill="rgb(223,20,43)" fg:x="6149" fg:w="2"/><text x="60.4871%" y="111.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_for_each (6,058 samples, 59.35%)</title><rect x="0.9208%" y="277" width="59.3456%" height="15" fill="rgb(229,81,49)" fg:x="94" fg:w="6058"/><text x="1.1708%" y="287.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_for_each</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_fold (6,058 samples, 59.35%)</title><rect x="0.9208%" y="261" width="59.3456%" height="15" fill="rgb(236,28,36)" fg:x="94" fg:w="6058"/><text x="1.1708%" y="271.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (6,055 samples, 59.32%)</title><rect x="0.9502%" y="245" width="59.3162%" height="15" fill="rgb(249,185,26)" fg:x="97" fg:w="6055"/><text x="1.2002%" y="255.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run::_{{closure}} (6,055 samples, 59.32%)</title><rect x="0.9502%" y="229" width="59.3162%" height="15" fill="rgb(249,174,33)" fg:x="97" fg:w="6055"/><text x="1.2002%" y="239.50">benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::system::SyncSystem as apecs::schedule::IsSystem&gt;::run (6,055 samples, 59.32%)</title><rect x="0.9502%" y="213" width="59.3162%" height="15" fill="rgb(233,201,37)" fg:x="97" fg:w="6055"/><text x="1.2002%" y="223.50">benchmark-4b441f3e4652afcb`&lt;apecs::system::SyncSystem as apecs::schedule::IsSystem&gt;::run</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;apecs::system::SyncSystem&gt;,alloc::vec::into_iter::IntoIter&lt;std::collections::hash::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="60.2665%" y="277" width="0.0294%" height="15" fill="rgb(221,78,26)" fg:x="6152" fg:w="3"/><text x="60.5165%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;std::collections::hash::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="60.2665%" y="261" width="0.0294%" height="15" fill="rgb(250,127,30)" fg:x="6152" fg:w="3"/><text x="60.5165%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="60.2665%" y="245" width="0.0294%" height="15" fill="rgb(230,49,44)" fg:x="6152" fg:w="3"/><text x="60.5165%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;std::collections::hash::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource&gt;,alloc::alloc::Global&gt;&gt; (3 samples, 0.03%)</title><rect x="60.2665%" y="229" width="0.0294%" height="15" fill="rgb(229,67,23)" fg:x="6152" fg:w="3"/><text x="60.5165%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="60.2665%" y="213" width="0.0294%" height="15" fill="rgb(249,83,47)" fg:x="6152" fg:w="3"/><text x="60.5165%" y="223.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::collections::hash::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="60.2763%" y="197" width="0.0196%" height="15" fill="rgb(215,43,3)" fg:x="6153" fg:w="2"/><text x="60.5263%" y="207.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="60.2763%" y="181" width="0.0196%" height="15" fill="rgb(238,154,13)" fg:x="6153" fg:w="2"/><text x="60.5263%" y="191.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="60.2763%" y="165" width="0.0196%" height="15" fill="rgb(219,56,2)" fg:x="6153" fg:w="2"/><text x="60.5263%" y="175.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run (6,087 samples, 59.63%)</title><rect x="0.6759%" y="293" width="59.6297%" height="15" fill="rgb(233,0,4)" fg:x="69" fg:w="6087"/><text x="0.9259%" y="303.50">benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsSchedule::run (6,135 samples, 60.10%)</title><rect x="0.2155%" y="309" width="60.0999%" height="15" fill="rgb(235,30,7)" fg:x="22" fg:w="6135"/><text x="0.4655%" y="319.50">benchmark-4b441f3e4652afcb`apecs::schedule::IsSchedule::run</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,151 samples, 60.26%)</title><rect x="0.0784%" y="501" width="60.2567%" height="15" fill="rgb(250,79,13)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="511.50">benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_..</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each (6,151 samples, 60.26%)</title><rect x="0.0784%" y="485" width="60.2567%" height="15" fill="rgb(211,146,34)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="495.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,151 samples, 60.26%)</title><rect x="0.0784%" y="469" width="60.2567%" height="15" fill="rgb(228,22,38)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="479.50">benchmark-4b441f3e4652afcb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Ite..</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::fold (6,151 samples, 60.26%)</title><rect x="0.0784%" y="453" width="60.2567%" height="15" fill="rgb(235,168,5)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="463.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::fold</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::adapters::map::map_fold::_{{closure}} (6,151 samples, 60.26%)</title><rect x="0.0784%" y="437" width="60.2567%" height="15" fill="rgb(221,155,16)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="447.50">benchmark-4b441f3e4652afcb`core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (6,151 samples, 60.26%)</title><rect x="0.0784%" y="421" width="60.2567%" height="15" fill="rgb(215,215,53)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="431.50">benchmark-4b441f3e4652afcb`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;..</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (6,151 samples, 60.26%)</title><rect x="0.0784%" y="405" width="60.2567%" height="15" fill="rgb(223,4,10)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="415.50">benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure..</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closure}} (6,151 samples, 60.26%)</title><rect x="0.0784%" y="389" width="60.2567%" height="15" fill="rgb(234,103,6)" fg:x="8" fg:w="6151"/><text x="0.3284%" y="399.50">benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::bencher::Bencher&lt;M&gt;::iter (6,137 samples, 60.12%)</title><rect x="0.2155%" y="373" width="60.1195%" height="15" fill="rgb(227,97,0)" fg:x="22" fg:w="6137"/><text x="0.4655%" y="383.50">benchmark-4b441f3e4652afcb`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closure}}::_{{closure}} (6,137 samples, 60.12%)</title><rect x="0.2155%" y="357" width="60.1195%" height="15" fill="rgb(234,150,53)" fg:x="22" fg:w="6137"/><text x="0.4655%" y="367.50">benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closure}}::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::run (6,137 samples, 60.12%)</title><rect x="0.2155%" y="341" width="60.1195%" height="15" fill="rgb(228,201,54)" fg:x="22" fg:w="6137"/><text x="0.4655%" y="351.50">benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::run</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::World::tick_with_context (6,137 samples, 60.12%)</title><rect x="0.2155%" y="325" width="60.1195%" height="15" fill="rgb(222,22,37)" fg:x="22" fg:w="6137"/><text x="0.4655%" y="335.50">benchmark-4b441f3e4652afcb`apecs::world::World::tick_with_context</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::clear_returned_resources (2 samples, 0.02%)</title><rect x="60.3154%" y="309" width="0.0196%" height="15" fill="rgb(237,53,32)" fg:x="6157" fg:w="2"/><text x="60.5654%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`async_channel::Receiver&lt;T&gt;::try_recv (2 samples, 0.02%)</title><rect x="60.3154%" y="293" width="0.0196%" height="15" fill="rgb(233,25,53)" fg:x="6157" fg:w="2"/><text x="60.5654%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="60.3154%" y="277" width="0.0196%" height="15" fill="rgb(210,40,34)" fg:x="6157" fg:w="2"/><text x="60.5654%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="60.3154%" y="261" width="0.0196%" height="15" fill="rgb(241,220,44)" fg:x="6157" fg:w="2"/><text x="60.5654%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (6,152 samples, 60.27%)</title><rect x="0.0784%" y="581" width="60.2665%" height="15" fill="rgb(235,28,35)" fg:x="8" fg:w="6152"/><text x="0.3284%" y="591.50">benchmark-4b441f3e4652afcb`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;..</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::collect (6,152 samples, 60.27%)</title><rect x="0.0784%" y="565" width="60.2665%" height="15" fill="rgb(210,56,17)" fg:x="8" fg:w="6152"/><text x="0.3284%" y="575.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::collect</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,152 samples, 60.27%)</title><rect x="0.0784%" y="549" width="60.2665%" height="15" fill="rgb(224,130,29)" fg:x="8" fg:w="6152"/><text x="0.3284%" y="559.50">benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::fro..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,152 samples, 60.27%)</title><rect x="0.0784%" y="533" width="60.2665%" height="15" fill="rgb(235,212,8)" fg:x="8" fg:w="6152"/><text x="0.3284%" y="543.50">benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::fr..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,152 samples, 60.27%)</title><rect x="0.0784%" y="517" width="60.2665%" height="15" fill="rgb(223,33,50)" fg:x="8" fg:w="6152"/><text x="0.3284%" y="527.50">benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNes..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::ExtendFunc&lt;F&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (3 samples, 0.03%)</title><rect x="60.3644%" y="453" width="0.0294%" height="15" fill="rgb(219,149,13)" fg:x="6162" fg:w="3"/><text x="60.6144%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::mem::replace (3 samples, 0.03%)</title><rect x="60.4624%" y="421" width="0.0294%" height="15" fill="rgb(250,156,29)" fg:x="6172" fg:w="3"/><text x="60.7124%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.10%)</title><rect x="60.4036%" y="437" width="0.0980%" height="15" fill="rgb(216,193,19)" fg:x="6166" fg:w="10"/><text x="60.6536%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 0.17%)</title><rect x="60.3448%" y="469" width="0.1665%" height="15" fill="rgb(216,135,14)" fg:x="6160" fg:w="17"/><text x="60.5948%" y="479.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11 samples, 0.11%)</title><rect x="60.4036%" y="453" width="0.1078%" height="15" fill="rgb(241,47,5)" fg:x="6166" fg:w="11"/><text x="60.6536%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorage&lt;T&gt; as apecs::storage::WorldStorage&gt;::new_with_capacity (18 samples, 0.18%)</title><rect x="60.3448%" y="517" width="0.1763%" height="15" fill="rgb(233,42,35)" fg:x="6160" fg:w="18"/><text x="60.5948%" y="527.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::storage::vec::VecStorage&lt;T&gt;::new_with_capacity (18 samples, 0.18%)</title><rect x="60.3448%" y="501" width="0.1763%" height="15" fill="rgb(231,13,6)" fg:x="6160" fg:w="18"/><text x="60.5948%" y="511.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::resize_with (18 samples, 0.18%)</title><rect x="60.3448%" y="485" width="0.1763%" height="15" fill="rgb(207,181,40)" fg:x="6160" fg:w="18"/><text x="60.5948%" y="495.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.02%)</title><rect x="60.5505%" y="485" width="0.0196%" height="15" fill="rgb(254,173,49)" fg:x="6181" fg:w="2"/><text x="60.8005%" y="495.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.02%)</title><rect x="60.5505%" y="469" width="0.0196%" height="15" fill="rgb(221,1,38)" fg:x="6181" fg:w="2"/><text x="60.8005%" y="479.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.04%)</title><rect x="60.6877%" y="389" width="0.0392%" height="15" fill="rgb(206,124,46)" fg:x="6195" fg:w="4"/><text x="60.9377%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.02%)</title><rect x="60.7073%" y="373" width="0.0196%" height="15" fill="rgb(249,21,11)" fg:x="6197" fg:w="2"/><text x="60.9573%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::metadata::from_raw_parts_mut (3 samples, 0.03%)</title><rect x="60.7367%" y="373" width="0.0294%" height="15" fill="rgb(222,201,40)" fg:x="6200" fg:w="3"/><text x="60.9867%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (11 samples, 0.11%)</title><rect x="60.6681%" y="405" width="0.1078%" height="15" fill="rgb(235,61,29)" fg:x="6193" fg:w="11"/><text x="60.9181%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::raw::from_raw_parts_mut (5 samples, 0.05%)</title><rect x="60.7269%" y="389" width="0.0490%" height="15" fill="rgb(219,207,3)" fg:x="6199" fg:w="5"/><text x="60.9769%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.13%)</title><rect x="60.6583%" y="421" width="0.1274%" height="15" fill="rgb(222,56,46)" fg:x="6192" fg:w="13"/><text x="60.9083%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.02%)</title><rect x="61.0795%" y="357" width="0.0196%" height="15" fill="rgb(239,76,54)" fg:x="6235" fg:w="2"/><text x="61.3295%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.13%)</title><rect x="60.9816%" y="373" width="0.1274%" height="15" fill="rgb(231,124,27)" fg:x="6225" fg:w="13"/><text x="61.2316%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::metadata::from_raw_parts (3 samples, 0.03%)</title><rect x="61.1187%" y="357" width="0.0294%" height="15" fill="rgb(249,195,6)" fg:x="6239" fg:w="3"/><text x="61.3687%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.23%)</title><rect x="60.9522%" y="389" width="0.2253%" height="15" fill="rgb(237,174,47)" fg:x="6222" fg:w="23"/><text x="61.2022%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::raw::from_raw_parts (7 samples, 0.07%)</title><rect x="61.1089%" y="373" width="0.0686%" height="15" fill="rgb(206,201,31)" fg:x="6238" fg:w="7"/><text x="61.3589%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::slice_from_raw_parts (3 samples, 0.03%)</title><rect x="61.1481%" y="357" width="0.0294%" height="15" fill="rgb(231,57,52)" fg:x="6242" fg:w="3"/><text x="61.3981%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.33%)</title><rect x="60.8934%" y="405" width="0.3331%" height="15" fill="rgb(248,177,22)" fg:x="6216" fg:w="34"/><text x="61.1434%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.05%)</title><rect x="61.1775%" y="389" width="0.0490%" height="15" fill="rgb(215,211,37)" fg:x="6245" fg:w="5"/><text x="61.4275%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.04%)</title><rect x="61.1873%" y="373" width="0.0392%" height="15" fill="rgb(241,128,51)" fg:x="6246" fg:w="4"/><text x="61.4373%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.04%)</title><rect x="61.2363%" y="373" width="0.0392%" height="15" fill="rgb(227,165,31)" fg:x="6251" fg:w="4"/><text x="61.4863%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8 samples, 0.08%)</title><rect x="61.2363%" y="389" width="0.0784%" height="15" fill="rgb(228,167,24)" fg:x="6251" fg:w="8"/><text x="61.4863%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::raw::from_raw_parts_mut (3 samples, 0.03%)</title><rect x="61.2853%" y="373" width="0.0294%" height="15" fill="rgb(228,143,12)" fg:x="6256" fg:w="3"/><text x="61.5353%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::metadata::from_raw_parts_mut (2 samples, 0.02%)</title><rect x="61.2951%" y="357" width="0.0196%" height="15" fill="rgb(249,149,8)" fg:x="6257" fg:w="2"/><text x="61.5451%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11 samples, 0.11%)</title><rect x="61.2265%" y="405" width="0.1078%" height="15" fill="rgb(243,35,44)" fg:x="6250" fg:w="11"/><text x="61.4765%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.02%)</title><rect x="61.3147%" y="389" width="0.0196%" height="15" fill="rgb(246,89,9)" fg:x="6259" fg:w="2"/><text x="61.5647%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="61.3147%" y="373" width="0.0196%" height="15" fill="rgb(233,213,13)" fg:x="6259" fg:w="2"/><text x="61.5647%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hibitset::BitSet::add (57 samples, 0.56%)</title><rect x="60.7857%" y="421" width="0.5584%" height="15" fill="rgb(233,141,41)" fg:x="6205" fg:w="57"/><text x="61.0357%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (3 samples, 0.03%)</title><rect x="61.5204%" y="357" width="0.0294%" height="15" fill="rgb(239,167,4)" fg:x="6280" fg:w="3"/><text x="61.7704%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::as_ptr (6 samples, 0.06%)</title><rect x="61.5008%" y="373" width="0.0588%" height="15" fill="rgb(209,217,16)" fg:x="6278" fg:w="6"/><text x="61.7508%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.15%)</title><rect x="61.4714%" y="389" width="0.1469%" height="15" fill="rgb(219,88,35)" fg:x="6275" fg:w="15"/><text x="61.7214%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::raw::from_raw_parts (6 samples, 0.06%)</title><rect x="61.5596%" y="373" width="0.0588%" height="15" fill="rgb(220,193,23)" fg:x="6284" fg:w="6"/><text x="61.8096%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.21%)</title><rect x="61.4518%" y="405" width="0.2057%" height="15" fill="rgb(230,90,52)" fg:x="6273" fg:w="21"/><text x="61.7018%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.04%)</title><rect x="61.6183%" y="389" width="0.0392%" height="15" fill="rgb(252,106,19)" fg:x="6290" fg:w="4"/><text x="61.8683%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorage&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::insert (107 samples, 1.05%)</title><rect x="60.6191%" y="437" width="1.0482%" height="15" fill="rgb(206,74,20)" fg:x="6188" fg:w="107"/><text x="60.8691%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hibitset::BitSet::contains (33 samples, 0.32%)</title><rect x="61.3440%" y="421" width="0.3233%" height="15" fill="rgb(230,138,44)" fg:x="6262" fg:w="33"/><text x="61.5940%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::as_mut (3 samples, 0.03%)</title><rect x="61.6771%" y="437" width="0.0294%" height="15" fill="rgb(235,182,43)" fg:x="6296" fg:w="3"/><text x="61.9271%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Write&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::insert (114 samples, 1.12%)</title><rect x="60.5995%" y="453" width="1.1168%" height="15" fill="rgb(242,16,51)" fg:x="6186" fg:w="114"/><text x="60.8495%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.10%)</title><rect x="61.7457%" y="421" width="0.0980%" height="15" fill="rgb(248,9,4)" fg:x="6303" fg:w="10"/><text x="61.9957%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.08%)</title><rect x="61.7653%" y="405" width="0.0784%" height="15" fill="rgb(210,31,22)" fg:x="6305" fg:w="8"/><text x="62.0153%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::raw::from_raw_parts (5 samples, 0.05%)</title><rect x="61.7947%" y="389" width="0.0490%" height="15" fill="rgb(239,54,39)" fg:x="6308" fg:w="5"/><text x="62.0447%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::slice_from_raw_parts (2 samples, 0.02%)</title><rect x="61.8241%" y="373" width="0.0196%" height="15" fill="rgb(230,99,41)" fg:x="6311" fg:w="2"/><text x="62.0741%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="61.8730%" y="389" width="0.0196%" height="15" fill="rgb(253,106,12)" fg:x="6316" fg:w="2"/><text x="62.1230%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.05%)</title><rect x="61.8632%" y="405" width="0.0490%" height="15" fill="rgb(213,46,41)" fg:x="6315" fg:w="5"/><text x="62.1132%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::raw::from_raw_parts_mut (2 samples, 0.02%)</title><rect x="61.8926%" y="389" width="0.0196%" height="15" fill="rgb(215,133,35)" fg:x="6318" fg:w="2"/><text x="62.1426%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.10%)</title><rect x="61.8437%" y="421" width="0.0980%" height="15" fill="rgb(213,28,5)" fg:x="6313" fg:w="10"/><text x="62.0937%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.03%)</title><rect x="61.9122%" y="405" width="0.0294%" height="15" fill="rgb(215,77,49)" fg:x="6320" fg:w="3"/><text x="62.1622%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::entities::Entities::create (24 samples, 0.24%)</title><rect x="61.7163%" y="453" width="0.2351%" height="15" fill="rgb(248,100,22)" fg:x="6300" fg:w="24"/><text x="61.9663%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hibitset::BitSet::add (23 samples, 0.23%)</title><rect x="61.7261%" y="437" width="0.2253%" height="15" fill="rgb(208,67,9)" fg:x="6301" fg:w="23"/><text x="61.9761%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`cgmath::matrix::Matrix4&lt;S&gt;::from_cols (5 samples, 0.05%)</title><rect x="62.0004%" y="421" width="0.0490%" height="15" fill="rgb(219,133,21)" fg:x="6329" fg:w="5"/><text x="62.2504%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`cgmath::matrix::Matrix4&lt;S&gt;::new (2 samples, 0.02%)</title><rect x="62.0494%" y="421" width="0.0196%" height="15" fill="rgb(246,46,29)" fg:x="6334" fg:w="2"/><text x="62.2994%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`cgmath::matrix::Matrix4&lt;S&gt;::from_scale (14 samples, 0.14%)</title><rect x="61.9514%" y="453" width="0.1371%" height="15" fill="rgb(246,185,52)" fg:x="6324" fg:w="14"/><text x="62.2014%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`cgmath::matrix::Matrix4&lt;S&gt;::from_nonuniform_scale (13 samples, 0.13%)</title><rect x="61.9612%" y="437" width="0.1274%" height="15" fill="rgb(252,136,11)" fg:x="6325" fg:w="13"/><text x="62.2112%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`cgmath::vector::Vector4&lt;S&gt;::new (2 samples, 0.02%)</title><rect x="62.0690%" y="421" width="0.0196%" height="15" fill="rgb(219,138,53)" fg:x="6336" fg:w="2"/><text x="62.3190%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::new (181 samples, 1.77%)</title><rect x="60.3448%" y="533" width="1.7731%" height="15" fill="rgb(211,51,23)" fg:x="6160" fg:w="181"/><text x="60.5948%" y="543.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each (161 samples, 1.58%)</title><rect x="60.5408%" y="517" width="1.5772%" height="15" fill="rgb(247,221,28)" fg:x="6180" fg:w="161"/><text x="60.7908%" y="527.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::fold (161 samples, 1.58%)</title><rect x="60.5408%" y="501" width="1.5772%" height="15" fill="rgb(251,222,45)" fg:x="6180" fg:w="161"/><text x="60.7908%" y="511.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (158 samples, 1.55%)</title><rect x="60.5701%" y="485" width="1.5478%" height="15" fill="rgb(217,162,53)" fg:x="6183" fg:w="158"/><text x="60.8201%" y="495.50"></text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::new::_{{closure}} (158 samples, 1.55%)</title><rect x="60.5701%" y="469" width="1.5478%" height="15" fill="rgb(229,93,14)" fg:x="6183" fg:w="158"/><text x="60.8201%" y="479.50"></text></g><g><title>benchmark-4b441f3e4652afcb`cgmath::vector::Vector3&lt;S&gt;::unit_x (2 samples, 0.02%)</title><rect x="62.0984%" y="453" width="0.0196%" height="15" fill="rgb(209,67,49)" fg:x="6339" fg:w="2"/><text x="62.3484%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="62.1473%" y="405" width="0.0196%" height="15" fill="rgb(213,87,29)" fg:x="6344" fg:w="2"/><text x="62.3973%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="62.1473%" y="389" width="0.0196%" height="15" fill="rgb(205,151,52)" fg:x="6344" fg:w="2"/><text x="62.3973%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="62.1473%" y="373" width="0.0196%" height="15" fill="rgb(253,215,39)" fg:x="6344" fg:w="2"/><text x="62.3973%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (2 samples, 0.02%)</title><rect x="62.1473%" y="357" width="0.0196%" height="15" fill="rgb(221,220,41)" fg:x="6344" fg:w="2"/><text x="62.3973%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (2 samples, 0.02%)</title><rect x="62.1473%" y="341" width="0.0196%" height="15" fill="rgb(218,133,21)" fg:x="6344" fg:w="2"/><text x="62.3973%" y="351.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.03%)</title><rect x="62.1865%" y="293" width="0.0294%" height="15" fill="rgb(221,193,43)" fg:x="6348" fg:w="3"/><text x="62.4365%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="62.1963%" y="277" width="0.0196%" height="15" fill="rgb(240,128,52)" fg:x="6349" fg:w="2"/><text x="62.4463%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_insert_hash (5 samples, 0.05%)</title><rect x="62.1865%" y="325" width="0.0490%" height="15" fill="rgb(253,114,12)" fg:x="6348" fg:w="5"/><text x="62.4365%" y="335.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (5 samples, 0.05%)</title><rect x="62.1865%" y="309" width="0.0490%" height="15" fill="rgb(215,223,47)" fg:x="6348" fg:w="5"/><text x="62.4365%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each (8 samples, 0.08%)</title><rect x="62.1669%" y="405" width="0.0784%" height="15" fill="rgb(248,225,23)" fg:x="6346" fg:w="8"/><text x="62.4169%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::fold (8 samples, 0.08%)</title><rect x="62.1669%" y="389" width="0.0784%" height="15" fill="rgb(250,108,0)" fg:x="6346" fg:w="8"/><text x="62.4169%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.07%)</title><rect x="62.1767%" y="373" width="0.0686%" height="15" fill="rgb(228,208,7)" fg:x="6347" fg:w="7"/><text x="62.4267%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (7 samples, 0.07%)</title><rect x="62.1767%" y="357" width="0.0686%" height="15" fill="rgb(244,45,10)" fg:x="6347" fg:w="7"/><text x="62.4267%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.07%)</title><rect x="62.1767%" y="341" width="0.0686%" height="15" fill="rgb(207,125,25)" fg:x="6347" fg:w="7"/><text x="62.4267%" y="351.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 0.12%)</title><rect x="62.1473%" y="437" width="0.1176%" height="15" fill="rgb(210,195,18)" fg:x="6344" fg:w="12"/><text x="62.3973%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 0.12%)</title><rect x="62.1473%" y="421" width="0.1176%" height="15" fill="rgb(249,80,12)" fg:x="6344" fg:w="12"/><text x="62.3973%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2 samples, 0.02%)</title><rect x="62.2453%" y="405" width="0.0196%" height="15" fill="rgb(221,65,9)" fg:x="6354" fg:w="2"/><text x="62.4953%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="62.2453%" y="389" width="0.0196%" height="15" fill="rgb(235,49,36)" fg:x="6354" fg:w="2"/><text x="62.4953%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (3 samples, 0.03%)</title><rect x="62.2747%" y="421" width="0.0294%" height="15" fill="rgb(225,32,20)" fg:x="6357" fg:w="3"/><text x="62.5247%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (3 samples, 0.03%)</title><rect x="62.2747%" y="405" width="0.0294%" height="15" fill="rgb(215,141,46)" fg:x="6357" fg:w="3"/><text x="62.5247%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::RandomState::new (3 samples, 0.03%)</title><rect x="62.2747%" y="389" width="0.0294%" height="15" fill="rgb(250,160,47)" fg:x="6357" fg:w="3"/><text x="62.5247%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.03%)</title><rect x="62.2747%" y="373" width="0.0294%" height="15" fill="rgb(216,222,40)" fg:x="6357" fg:w="3"/><text x="62.5247%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_insert_hash (3 samples, 0.03%)</title><rect x="62.3139%" y="389" width="0.0294%" height="15" fill="rgb(234,217,39)" fg:x="6361" fg:w="3"/><text x="62.5639%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="62.3139%" y="373" width="0.0294%" height="15" fill="rgb(207,178,40)" fg:x="6361" fg:w="3"/><text x="62.5639%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (3 samples, 0.03%)</title><rect x="62.4020%" y="341" width="0.0294%" height="15" fill="rgb(221,136,13)" fg:x="6370" fg:w="3"/><text x="62.6520%" y="351.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3 samples, 0.03%)</title><rect x="62.4020%" y="325" width="0.0294%" height="15" fill="rgb(249,199,10)" fg:x="6370" fg:w="3"/><text x="62.6520%" y="335.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.02%)</title><rect x="62.4118%" y="309" width="0.0196%" height="15" fill="rgb(249,222,13)" fg:x="6371" fg:w="2"/><text x="62.6618%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.02%)</title><rect x="62.4118%" y="293" width="0.0196%" height="15" fill="rgb(244,185,38)" fg:x="6371" fg:w="2"/><text x="62.6618%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="62.4118%" y="277" width="0.0196%" height="15" fill="rgb(236,202,9)" fg:x="6371" fg:w="2"/><text x="62.6618%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="62.4118%" y="261" width="0.0196%" height="15" fill="rgb(250,229,37)" fg:x="6371" fg:w="2"/><text x="62.6618%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.06%)</title><rect x="62.3824%" y="357" width="0.0588%" height="15" fill="rgb(206,174,23)" fg:x="6368" fg:w="6"/><text x="62.6324%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (15 samples, 0.15%)</title><rect x="62.3139%" y="421" width="0.1469%" height="15" fill="rgb(211,33,43)" fg:x="6361" fg:w="15"/><text x="62.5639%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.15%)</title><rect x="62.3139%" y="405" width="0.1469%" height="15" fill="rgb(245,58,50)" fg:x="6361" fg:w="15"/><text x="62.5639%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.11%)</title><rect x="62.3531%" y="389" width="0.1078%" height="15" fill="rgb(244,68,36)" fg:x="6365" fg:w="11"/><text x="62.6031%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (9 samples, 0.09%)</title><rect x="62.3726%" y="373" width="0.0882%" height="15" fill="rgb(232,229,15)" fg:x="6367" fg:w="9"/><text x="62.6226%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="62.4412%" y="357" width="0.0196%" height="15" fill="rgb(254,30,23)" fg:x="6374" fg:w="2"/><text x="62.6912%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="62.4706%" y="341" width="0.0196%" height="15" fill="rgb(235,160,14)" fg:x="6377" fg:w="2"/><text x="62.7206%" y="351.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="62.4706%" y="325" width="0.0196%" height="15" fill="rgb(212,155,44)" fg:x="6377" fg:w="2"/><text x="62.7206%" y="335.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="62.4706%" y="309" width="0.0196%" height="15" fill="rgb(226,2,50)" fg:x="6377" fg:w="2"/><text x="62.7206%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::make_hash (3 samples, 0.03%)</title><rect x="62.4706%" y="373" width="0.0294%" height="15" fill="rgb(234,177,6)" fg:x="6377" fg:w="3"/><text x="62.7206%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="62.4706%" y="357" width="0.0294%" height="15" fill="rgb(217,24,9)" fg:x="6377" fg:w="3"/><text x="62.7206%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::prepare_batch_data (40 samples, 0.39%)</title><rect x="62.1277%" y="453" width="0.3918%" height="15" fill="rgb(220,13,46)" fg:x="6342" fg:w="40"/><text x="62.3777%" y="463.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::try_take_resources (25 samples, 0.24%)</title><rect x="62.2747%" y="437" width="0.2449%" height="15" fill="rgb(239,221,27)" fg:x="6357" fg:w="25"/><text x="62.5247%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (6 samples, 0.06%)</title><rect x="62.4608%" y="421" width="0.0588%" height="15" fill="rgb(222,198,25)" fg:x="6376" fg:w="6"/><text x="62.7108%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (6 samples, 0.06%)</title><rect x="62.4608%" y="405" width="0.0588%" height="15" fill="rgb(211,99,13)" fg:x="6376" fg:w="6"/><text x="62.7108%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.05%)</title><rect x="62.4706%" y="389" width="0.0490%" height="15" fill="rgb(232,111,31)" fg:x="6377" fg:w="5"/><text x="62.7206%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.02%)</title><rect x="62.5000%" y="373" width="0.0196%" height="15" fill="rgb(245,82,37)" fg:x="6380" fg:w="2"/><text x="62.7500%" y="383.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.02%)</title><rect x="62.5000%" y="357" width="0.0196%" height="15" fill="rgb(227,149,46)" fg:x="6380" fg:w="2"/><text x="62.7500%" y="367.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (2 samples, 0.02%)</title><rect x="62.5000%" y="341" width="0.0196%" height="15" fill="rgb(218,36,50)" fg:x="6380" fg:w="2"/><text x="62.7500%" y="351.50"></text></g><g><title>benchmark-4b441f3e4652afcb`concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="62.5490%" y="389" width="0.0196%" height="15" fill="rgb(226,80,48)" fg:x="6385" fg:w="2"/><text x="62.7990%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3 samples, 0.03%)</title><rect x="62.5490%" y="405" width="0.0294%" height="15" fill="rgb(238,224,15)" fg:x="6385" fg:w="3"/><text x="62.7990%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`async_channel::Receiver&lt;T&gt;::try_recv (4 samples, 0.04%)</title><rect x="62.5490%" y="421" width="0.0392%" height="15" fill="rgb(241,136,10)" fg:x="6385" fg:w="4"/><text x="62.7990%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.02%)</title><rect x="62.5980%" y="421" width="0.0196%" height="15" fill="rgb(208,32,45)" fg:x="6390" fg:w="2"/><text x="62.8480%" y="431.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.02%)</title><rect x="62.5980%" y="405" width="0.0196%" height="15" fill="rgb(207,135,9)" fg:x="6390" fg:w="2"/><text x="62.8480%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::clear_returned_resources (10 samples, 0.10%)</title><rect x="62.5392%" y="437" width="0.0980%" height="15" fill="rgb(206,86,44)" fg:x="6384" fg:w="10"/><text x="62.7892%" y="447.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="62.6371%" y="405" width="0.0196%" height="15" fill="rgb(245,177,15)" fg:x="6394" fg:w="2"/><text x="62.8871%" y="415.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.02%)</title><rect x="62.6371%" y="389" width="0.0196%" height="15" fill="rgb(206,64,50)" fg:x="6394" fg:w="2"/><text x="62.8871%" y="399.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Read&lt;T&gt; as apecs::core::CanFetch&gt;::construct (2 samples, 0.02%)</title><rect x="62.6567%" y="309" width="0.0196%" height="15" fill="rgb(234,36,40)" fg:x="6396" fg:w="2"/><text x="62.9067%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.02%)</title><rect x="62.6567%" y="293" width="0.0196%" height="15" fill="rgb(213,64,8)" fg:x="6396" fg:w="2"/><text x="62.9067%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.02%)</title><rect x="62.6567%" y="277" width="0.0196%" height="15" fill="rgb(210,75,36)" fg:x="6396" fg:w="2"/><text x="62.9067%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Write&lt;T&gt; as apecs::core::CanFetch&gt;::construct (4 samples, 0.04%)</title><rect x="62.6763%" y="309" width="0.0392%" height="15" fill="rgb(229,88,21)" fg:x="6398" fg:w="4"/><text x="62.9263%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.03%)</title><rect x="62.6861%" y="293" width="0.0294%" height="15" fill="rgb(252,204,47)" fg:x="6399" fg:w="3"/><text x="62.9361%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.03%)</title><rect x="62.6861%" y="277" width="0.0294%" height="15" fill="rgb(208,77,27)" fg:x="6399" fg:w="3"/><text x="62.9361%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.03%)</title><rect x="62.6861%" y="261" width="0.0294%" height="15" fill="rgb(221,76,26)" fg:x="6399" fg:w="3"/><text x="62.9361%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.02%)</title><rect x="62.6959%" y="245" width="0.0196%" height="15" fill="rgb(225,139,18)" fg:x="6400" fg:w="2"/><text x="62.9459%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.02%)</title><rect x="62.6959%" y="229" width="0.0196%" height="15" fill="rgb(230,137,11)" fg:x="6400" fg:w="2"/><text x="62.9459%" y="239.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;benchmark::simple_iter::SimpleIterData&lt;S2,S4&gt; as apecs::core::CanFetch&gt;::construct (7 samples, 0.07%)</title><rect x="62.6567%" y="325" width="0.0686%" height="15" fill="rgb(212,28,1)" fg:x="6396" fg:w="7"/><text x="62.9067%" y="335.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::join::JoinedIter&lt;(A,B)&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.47%)</title><rect x="62.7253%" y="309" width="0.4702%" height="15" fill="rgb(248,164,17)" fg:x="6403" fg:w="48"/><text x="62.9753%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;(A,B) as apecs::join::Join&gt;::join (2 samples, 0.02%)</title><rect x="65.0372%" y="293" width="0.0196%" height="15" fill="rgb(222,171,42)" fg:x="6639" fg:w="2"/><text x="65.2872%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;&amp;mut T as apecs::join::Join&gt;::join (2 samples, 0.02%)</title><rect x="65.0372%" y="277" width="0.0196%" height="15" fill="rgb(243,84,45)" fg:x="6639" fg:w="2"/><text x="65.2872%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::core::Write&lt;T&gt; as apecs::storage::CanWriteStorage&gt;::iter_mut (2 samples, 0.02%)</title><rect x="65.0372%" y="261" width="0.0196%" height="15" fill="rgb(252,49,23)" fg:x="6639" fg:w="2"/><text x="65.2872%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::storage::Entry&lt;T&gt;::as_ref (55 samples, 0.54%)</title><rect x="74.1967%" y="245" width="0.5388%" height="15" fill="rgb(215,19,7)" fg:x="7574" fg:w="55"/><text x="74.4467%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorageIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (692 samples, 6.78%)</title><rect x="69.2692%" y="277" width="6.7790%" height="15" fill="rgb(238,81,41)" fg:x="7071" fg:w="692"/><text x="69.5192%" y="287.50">benchmark..</text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::map (347 samples, 3.40%)</title><rect x="72.6489%" y="261" width="3.3993%" height="15" fill="rgb(210,199,37)" fg:x="7416" fg:w="347"/><text x="72.8989%" y="271.50">ben..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ops::function::FnOnce::call_once (134 samples, 1.31%)</title><rect x="74.7355%" y="245" width="1.3127%" height="15" fill="rgb(244,192,49)" fg:x="7629" fg:w="134"/><text x="74.9855%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (107 samples, 1.05%)</title><rect x="84.9824%" y="245" width="1.0482%" height="15" fill="rgb(226,211,11)" fg:x="8675" fg:w="107"/><text x="85.2324%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (830 samples, 8.13%)</title><rect x="79.7512%" y="261" width="8.1309%" height="15" fill="rgb(236,162,54)" fg:x="8141" fg:w="830"/><text x="80.0012%" y="271.50">benchmark-4..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (189 samples, 1.85%)</title><rect x="86.0306%" y="245" width="1.8515%" height="15" fill="rgb(220,229,9)" fg:x="8782" fg:w="189"/><text x="86.2806%" y="255.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (104 samples, 1.02%)</title><rect x="87.8821%" y="261" width="1.0188%" height="15" fill="rgb(250,87,22)" fg:x="8971" fg:w="104"/><text x="88.1321%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::vec::VecStorageIterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,354 samples, 13.26%)</title><rect x="76.0482%" y="277" width="13.2641%" height="15" fill="rgb(239,43,17)" fg:x="7763" fg:w="1354"/><text x="76.2982%" y="287.50">benchmark-4b441f3e46..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (42 samples, 0.41%)</title><rect x="88.9009%" y="261" width="0.4114%" height="15" fill="rgb(231,177,25)" fg:x="9075" fg:w="42"/><text x="89.1509%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (122 samples, 1.20%)</title><rect x="89.3123%" y="277" width="1.1951%" height="15" fill="rgb(219,179,1)" fg:x="9117" fg:w="122"/><text x="89.5623%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`apecs::storage::Entry&lt;T&gt;::as_mut (57 samples, 0.56%)</title><rect x="90.5074%" y="277" width="0.5584%" height="15" fill="rgb(238,219,53)" fg:x="9239" fg:w="57"/><text x="90.7574%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::as_mut (135 samples, 1.32%)</title><rect x="91.0658%" y="277" width="1.3225%" height="15" fill="rgb(232,167,36)" fg:x="9296" fg:w="135"/><text x="91.3158%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::as_ref (125 samples, 1.22%)</title><rect x="92.3883%" y="277" width="1.2245%" height="15" fill="rgb(244,19,51)" fg:x="9431" fg:w="125"/><text x="92.6383%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::join::JoinedIter&lt;(A,B)&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,966 samples, 29.06%)</title><rect x="65.0568%" y="293" width="29.0556%" height="15" fill="rgb(224,6,22)" fg:x="6641" fg:w="2966"/><text x="65.3068%" y="303.50">benchmark-4b441f3e4652afcb`&lt;apecs::join::Joined..</text></g><g><title>benchmark-4b441f3e4652afcb`core::option::Option&lt;T&gt;::is_some (51 samples, 0.50%)</title><rect x="93.6129%" y="277" width="0.4996%" height="15" fill="rgb(224,145,5)" fg:x="9556" fg:w="51"/><text x="93.8629%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::storage::Entry&lt;T&gt; as apecs::storage::StorageComponent&gt;::split (124 samples, 1.21%)</title><rect x="94.1125%" y="293" width="1.2147%" height="15" fill="rgb(234,130,49)" fg:x="9607" fg:w="124"/><text x="94.3625%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;cgmath::vector::Vector3&lt;S&gt; as core::ops::arith::AddAssign&gt;::add_assign (109 samples, 1.07%)</title><rect x="95.3272%" y="293" width="1.0678%" height="15" fill="rgb(254,6,2)" fg:x="9731" fg:w="109"/><text x="95.5772%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (214 samples, 2.10%)</title><rect x="96.3950%" y="293" width="2.0964%" height="15" fill="rgb(208,96,46)" fg:x="9840" fg:w="214"/><text x="96.6450%" y="303.50">b..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (141 samples, 1.38%)</title><rect x="98.4914%" y="293" width="1.3813%" height="15" fill="rgb(239,3,39)" fg:x="10054" fg:w="141"/><text x="98.7414%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ops::function::FnMut::call_mut (3,793 samples, 37.16%)</title><rect x="62.7253%" y="325" width="37.1571%" height="15" fill="rgb(233,210,1)" fg:x="6403" fg:w="3793"/><text x="62.9753%" y="335.50">benchmark-4b441f3e4652afcb`core::ops::function::FnMut::call_..</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::sync_run (3,745 samples, 36.69%)</title><rect x="63.1955%" y="309" width="36.6869%" height="15" fill="rgb(244,137,37)" fg:x="6451" fg:w="3745"/><text x="63.4455%" y="319.50">benchmark-4b441f3e4652afcb`benchmark::simple_iter::sync_run</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_fold (3,804 samples, 37.26%)</title><rect x="62.6371%" y="421" width="37.2649%" height="15" fill="rgb(240,136,2)" fg:x="6394" fg:w="3804"/><text x="62.8871%" y="431.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iter..</text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (3,802 samples, 37.25%)</title><rect x="62.6567%" y="405" width="37.2453%" height="15" fill="rgb(239,18,37)" fg:x="6396" fg:w="3802"/><text x="62.9067%" y="415.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iter..</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run::_{{closure}} (3,802 samples, 37.25%)</title><rect x="62.6567%" y="389" width="37.2453%" height="15" fill="rgb(218,185,22)" fg:x="6396" fg:w="3802"/><text x="62.9067%" y="399.50">benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run::_{{..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;apecs::system::SyncSystem as apecs::schedule::IsSystem&gt;::run (3,802 samples, 37.25%)</title><rect x="62.6567%" y="373" width="37.2453%" height="15" fill="rgb(225,218,4)" fg:x="6396" fg:w="3802"/><text x="62.9067%" y="383.50">benchmark-4b441f3e4652afcb`&lt;apecs::system::SyncSystem as apec..</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnMut&lt;Args&gt;&gt;::call_mut (3,802 samples, 37.25%)</title><rect x="62.6567%" y="357" width="37.2453%" height="15" fill="rgb(230,182,32)" fg:x="6396" fg:w="3802"/><text x="62.9067%" y="367.50">benchmark-4b441f3e4652afcb`&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::World::with_system::_{{closure}} (3,802 samples, 37.25%)</title><rect x="62.6567%" y="341" width="37.2453%" height="15" fill="rgb(242,56,43)" fg:x="6396" fg:w="3802"/><text x="62.9067%" y="351.50">benchmark-4b441f3e4652afcb`apecs::world::World::with_system::..</text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource&gt;&gt; (2 samples, 0.02%)</title><rect x="99.8824%" y="325" width="0.0196%" height="15" fill="rgb(233,99,24)" fg:x="10196" fg:w="2"/><text x="100.1324%" y="335.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;apecs::core::ResourceId,apecs::core::FetchReadyResource,std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.02%)</title><rect x="99.8824%" y="309" width="0.0196%" height="15" fill="rgb(234,209,42)" fg:x="10196" fg:w="2"/><text x="100.1324%" y="319.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(apecs::core::ResourceId,apecs::core::FetchReadyResource)&gt;&gt; (2 samples, 0.02%)</title><rect x="99.8824%" y="293" width="0.0196%" height="15" fill="rgb(227,7,12)" fg:x="10196" fg:w="2"/><text x="100.1324%" y="303.50"></text></g><g><title>benchmark-4b441f3e4652afcb`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.8824%" y="277" width="0.0196%" height="15" fill="rgb(245,203,43)" fg:x="10196" fg:w="2"/><text x="100.1324%" y="287.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="99.8824%" y="261" width="0.0196%" height="15" fill="rgb(238,205,33)" fg:x="10196" fg:w="2"/><text x="100.1324%" y="271.50"></text></g><g><title>benchmark-4b441f3e4652afcb`hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="99.8824%" y="245" width="0.0196%" height="15" fill="rgb(231,56,7)" fg:x="10196" fg:w="2"/><text x="100.1324%" y="255.50"></text></g><g><title>benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iterator::try_for_each (3,805 samples, 37.27%)</title><rect x="62.6371%" y="437" width="37.2747%" height="15" fill="rgb(244,186,29)" fg:x="6394" fg:w="3805"/><text x="62.8871%" y="447.50">benchmark-4b441f3e4652afcb`core::iter::traits::iterator::Iter..</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run (3,818 samples, 37.40%)</title><rect x="62.5196%" y="453" width="37.4020%" height="15" fill="rgb(234,111,31)" fg:x="6382" fg:w="3818"/><text x="62.7696%" y="463.50">benchmark-4b441f3e4652afcb`apecs::schedule::IsBatch::run</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::schedule::IsSchedule::run (3,860 samples, 37.81%)</title><rect x="62.1179%" y="469" width="37.8135%" height="15" fill="rgb(241,149,10)" fg:x="6341" fg:w="3860"/><text x="62.3679%" y="479.50">benchmark-4b441f3e4652afcb`apecs::schedule::IsSchedule::run</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closure}}::_{{closure}} (3,861 samples, 37.82%)</title><rect x="62.1179%" y="517" width="37.8233%" height="15" fill="rgb(249,206,44)" fg:x="6341" fg:w="3861"/><text x="62.3679%" y="527.50">benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{cl..</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S1,S2,S3,S4&gt;::run (3,861 samples, 37.82%)</title><rect x="62.1179%" y="501" width="37.8233%" height="15" fill="rgb(251,153,30)" fg:x="6341" fg:w="3861"/><text x="62.3679%" y="511.50">benchmark-4b441f3e4652afcb`benchmark::simple_iter::Benchmark&lt;S..</text></g><g><title>benchmark-4b441f3e4652afcb`apecs::world::World::tick_with_context (3,861 samples, 37.82%)</title><rect x="62.1179%" y="485" width="37.8233%" height="15" fill="rgb(239,152,38)" fg:x="6341" fg:w="3861"/><text x="62.3679%" y="495.50">benchmark-4b441f3e4652afcb`apecs::world::World::tick_with_cont..</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::routine::Routine::profile (10,195 samples, 99.87%)</title><rect x="0.0784%" y="597" width="99.8726%" height="15" fill="rgb(249,139,47)" fg:x="8" fg:w="10195"/><text x="0.3284%" y="607.50">benchmark-4b441f3e4652afcb`criterion::routine::Routine::profile</text></g><g><title>benchmark-4b441f3e4652afcb`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (4,043 samples, 39.61%)</title><rect x="60.3448%" y="581" width="39.6062%" height="15" fill="rgb(244,64,35)" fg:x="6160" fg:w="4043"/><text x="60.5948%" y="591.50">benchmark-4b441f3e4652afcb`&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (4,043 samples, 39.61%)</title><rect x="60.3448%" y="565" width="39.6062%" height="15" fill="rgb(216,46,15)" fg:x="6160" fg:w="4043"/><text x="60.5948%" y="575.50">benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkG..</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closure}} (4,043 samples, 39.61%)</title><rect x="60.3448%" y="549" width="39.6062%" height="15" fill="rgb(250,74,19)" fg:x="6160" fg:w="4043"/><text x="60.5948%" y="559.50">benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter::_{{closu..</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::bencher::Bencher&lt;M&gt;::iter (3,862 samples, 37.83%)</title><rect x="62.1179%" y="533" width="37.8331%" height="15" fill="rgb(249,42,33)" fg:x="6341" fg:w="3862"/><text x="62.3679%" y="543.50">benchmark-4b441f3e4652afcb`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter (10,196 samples, 99.88%)</title><rect x="0.0784%" y="645" width="99.8824%" height="15" fill="rgb(242,149,17)" fg:x="8" fg:w="10196"/><text x="0.3284%" y="655.50">benchmark-4b441f3e4652afcb`benchmark::bench_simple_iter</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (10,196 samples, 99.88%)</title><rect x="0.0784%" y="629" width="99.8824%" height="15" fill="rgb(244,29,21)" fg:x="8" fg:w="10196"/><text x="0.3284%" y="639.50">benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (10,196 samples, 99.88%)</title><rect x="0.0784%" y="613" width="99.8824%" height="15" fill="rgb(220,130,37)" fg:x="8" fg:w="10196"/><text x="0.3284%" y="623.50">benchmark-4b441f3e4652afcb`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::benches (10,204 samples, 99.96%)</title><rect x="0.0196%" y="661" width="99.9608%" height="15" fill="rgb(211,67,2)" fg:x="2" fg:w="10204"/><text x="0.2696%" y="671.50">benchmark-4b441f3e4652afcb`benchmark::benches</text></g><g><title>benchmark-4b441f3e4652afcb`criterion::Criterion&lt;M&gt;::configure_from_args (2 samples, 0.02%)</title><rect x="99.9608%" y="645" width="0.0196%" height="15" fill="rgb(235,68,52)" fg:x="10204" fg:w="2"/><text x="100.2108%" y="655.50"></text></g><g><title>benchmark-4b441f3e4652afcb`main (10,207 samples, 99.99%)</title><rect x="0.0000%" y="773" width="99.9902%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="783.50">benchmark-4b441f3e4652afcb`main</text></g><g><title>benchmark-4b441f3e4652afcb`std::rt::lang_start (10,207 samples, 99.99%)</title><rect x="0.0000%" y="757" width="99.9902%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="767.50">benchmark-4b441f3e4652afcb`std::rt::lang_start</text></g><g><title>benchmark-4b441f3e4652afcb`std::rt::lang_start_internal (10,207 samples, 99.99%)</title><rect x="0.0000%" y="741" width="99.9902%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="751.50">benchmark-4b441f3e4652afcb`std::rt::lang_start_internal</text></g><g><title>benchmark-4b441f3e4652afcb`std::rt::lang_start::_{{closure}} (10,207 samples, 99.99%)</title><rect x="0.0000%" y="725" width="99.9902%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="735.50">benchmark-4b441f3e4652afcb`std::rt::lang_start::_{{closure}}</text></g><g><title>benchmark-4b441f3e4652afcb`std::sys_common::backtrace::__rust_begin_short_backtrace (10,207 samples, 99.99%)</title><rect x="0.0000%" y="709" width="99.9902%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="719.50">benchmark-4b441f3e4652afcb`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>benchmark-4b441f3e4652afcb`core::ops::function::FnOnce::call_once (10,207 samples, 99.99%)</title><rect x="0.0000%" y="693" width="99.9902%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="703.50">benchmark-4b441f3e4652afcb`core::ops::function::FnOnce::call_once</text></g><g><title>benchmark-4b441f3e4652afcb`benchmark::main (10,207 samples, 99.99%)</title><rect x="0.0000%" y="677" width="99.9902%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="10207"/><text x="0.2500%" y="687.50">benchmark-4b441f3e4652afcb`benchmark::main</text></g><g><title>all (10,208 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="10208"/><text x="0.2500%" y="815.50"></text></g><g><title>dyld`start (10,208 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="10208"/><text x="0.2500%" y="799.50">dyld`start</text></g></svg></svg>