<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="4974"><g><title>ecs-bench`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (63 samples, 1.27%)</title><rect x="0.0000%" y="245" width="1.2666%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="63"/><text x="0.2500%" y="255.50"></text></g><g><title>ecs-bench`apecs::world::World::tick_with_context (34 samples, 0.68%)</title><rect x="1.2666%" y="245" width="0.6836%" height="15" fill="rgb(217,0,24)" fg:x="63" fg:w="34"/><text x="1.5166%" y="255.50"></text></g><g><title>ecs-bench`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (78 samples, 1.57%)</title><rect x="5.6896%" y="229" width="1.5682%" height="15" fill="rgb(221,193,54)" fg:x="283" fg:w="78"/><text x="5.9396%" y="239.50"></text></g><g><title>ecs-bench`&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.40%)</title><rect x="7.2577%" y="229" width="0.4021%" height="15" fill="rgb(248,212,6)" fg:x="361" fg:w="20"/><text x="7.5077%" y="239.50"></text></g><g><title>ecs-bench`DYLD-STUB$$mach_absolute_time (24 samples, 0.48%)</title><rect x="7.6598%" y="229" width="0.4825%" height="15" fill="rgb(208,68,35)" fg:x="381" fg:w="24"/><text x="7.9098%" y="239.50"></text></g><g><title>ecs-bench`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (58 samples, 1.17%)</title><rect x="24.3064%" y="181" width="1.1661%" height="15" fill="rgb(232,128,0)" fg:x="1209" fg:w="58"/><text x="24.5564%" y="191.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (346 samples, 6.96%)</title><rect x="25.4725%" y="181" width="6.9562%" height="15" fill="rgb(207,160,47)" fg:x="1267" fg:w="346"/><text x="25.7225%" y="191.50">ecs-bench..</text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (230 samples, 4.62%)</title><rect x="32.4286%" y="181" width="4.6240%" height="15" fill="rgb(228,23,34)" fg:x="1613" fg:w="230"/><text x="32.6786%" y="191.50">ecs-b..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (763 samples, 15.34%)</title><rect x="22.0547%" y="197" width="15.3398%" height="15" fill="rgb(218,30,26)" fg:x="1097" fg:w="763"/><text x="22.3047%" y="207.50">ecs-bench`alloc::vec::V..</text></g><g><title>ecs-bench`core::ptr::unique::Unique&lt;T&gt;::as_ptr (17 samples, 0.34%)</title><rect x="37.0527%" y="181" width="0.3418%" height="15" fill="rgb(220,122,19)" fg:x="1843" fg:w="17"/><text x="37.3027%" y="191.50"></text></g><g><title>ecs-bench`core::slice::raw::debug_check_data_len (7 samples, 0.14%)</title><rect x="37.3945%" y="197" width="0.1407%" height="15" fill="rgb(250,228,42)" fg:x="1860" fg:w="7"/><text x="37.6445%" y="207.50"></text></g><g><title>ecs-bench`core::ptr::metadata::from_raw_parts_mut (55 samples, 1.11%)</title><rect x="40.1086%" y="181" width="1.1057%" height="15" fill="rgb(240,193,28)" fg:x="1995" fg:w="55"/><text x="40.3586%" y="191.50"></text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1,143 samples, 22.98%)</title><rect x="20.3659%" y="213" width="22.9795%" height="15" fill="rgb(216,20,37)" fg:x="1013" fg:w="1143"/><text x="20.6159%" y="223.50">ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as c..</text></g><g><title>ecs-bench`core::slice::raw::from_raw_parts_mut (289 samples, 5.81%)</title><rect x="37.5352%" y="197" width="5.8102%" height="15" fill="rgb(206,188,39)" fg:x="1867" fg:w="289"/><text x="37.7852%" y="207.50">ecs-ben..</text></g><g><title>ecs-bench`core::ptr::slice_from_raw_parts_mut (106 samples, 2.13%)</title><rect x="41.2143%" y="181" width="2.1311%" height="15" fill="rgb(217,207,13)" fg:x="2050" fg:w="106"/><text x="41.4643%" y="191.50">e..</text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (92 samples, 1.85%)</title><rect x="49.8191%" y="197" width="1.8496%" height="15" fill="rgb(231,73,38)" fg:x="2478" fg:w="92"/><text x="50.0691%" y="207.50">e..</text></g><g><title>ecs-bench`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (542 samples, 10.90%)</title><rect x="43.3454%" y="213" width="10.8967%" height="15" fill="rgb(225,20,46)" fg:x="2156" fg:w="542"/><text x="43.5954%" y="223.50">ecs-bench`&lt;core:..</text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (128 samples, 2.57%)</title><rect x="51.6687%" y="197" width="2.5734%" height="15" fill="rgb(210,31,41)" fg:x="2570" fg:w="128"/><text x="51.9187%" y="207.50">ec..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::is_empty (67 samples, 1.35%)</title><rect x="54.2421%" y="213" width="1.3470%" height="15" fill="rgb(221,200,47)" fg:x="2698" fg:w="67"/><text x="54.4921%" y="223.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::len (40 samples, 0.80%)</title><rect x="55.5891%" y="213" width="0.8042%" height="15" fill="rgb(226,26,5)" fg:x="2765" fg:w="40"/><text x="55.8391%" y="223.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut (249 samples, 5.01%)</title><rect x="56.3932%" y="213" width="5.0060%" height="15" fill="rgb(249,33,26)" fg:x="2805" fg:w="249"/><text x="56.6432%" y="223.50">ecs-be..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (2 samples, 0.04%)</title><rect x="61.3993%" y="213" width="0.0402%" height="15" fill="rgb(235,183,28)" fg:x="3054" fg:w="2"/><text x="61.6493%" y="223.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (162 samples, 3.26%)</title><rect x="61.4395%" y="197" width="3.2569%" height="15" fill="rgb(221,5,38)" fg:x="3056" fg:w="162"/><text x="61.6895%" y="207.50">ecs..</text></g><g><title>ecs-bench`&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 1.93%)</title><rect x="66.4455%" y="165" width="1.9300%" height="15" fill="rgb(247,18,42)" fg:x="3305" fg:w="96"/><text x="66.6955%" y="175.50">e..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::retain_mut (365 samples, 7.34%)</title><rect x="61.4395%" y="213" width="7.3382%" height="15" fill="rgb(241,131,45)" fg:x="3056" fg:w="365"/><text x="61.6895%" y="223.50">ecs-bench`..</text></g><g><title>ecs-bench`core::mem::drop (203 samples, 4.08%)</title><rect x="64.6964%" y="197" width="4.0812%" height="15" fill="rgb(249,31,29)" fg:x="3218" fg:w="203"/><text x="64.9464%" y="207.50">ecs-..</text></g><g><title>ecs-bench`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;apecs::system::AsyncSystem,alloc::alloc::Global&gt;&gt; (173 samples, 3.48%)</title><rect x="65.2996%" y="181" width="3.4781%" height="15" fill="rgb(225,111,53)" fg:x="3248" fg:w="173"/><text x="65.5496%" y="191.50">ecs..</text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::set_len (20 samples, 0.40%)</title><rect x="68.3756%" y="165" width="0.4021%" height="15" fill="rgb(238,160,17)" fg:x="3401" fg:w="20"/><text x="68.6256%" y="175.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::set_len (21 samples, 0.42%)</title><rect x="68.7776%" y="213" width="0.4222%" height="15" fill="rgb(214,148,48)" fg:x="3421" fg:w="21"/><text x="69.0276%" y="223.50"></text></g><g><title>ecs-bench`core::mem::drop (23 samples, 0.46%)</title><rect x="69.1998%" y="213" width="0.4624%" height="15" fill="rgb(232,36,49)" fg:x="3442" fg:w="23"/><text x="69.4498%" y="223.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="69.6622%" y="213" width="0.0201%" height="15" fill="rgb(209,103,24)" fg:x="3465" fg:w="1"/><text x="69.9122%" y="223.50"></text></g><g><title>ecs-bench`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (41 samples, 0.82%)</title><rect x="69.6823%" y="213" width="0.8243%" height="15" fill="rgb(229,88,8)" fg:x="3466" fg:w="41"/><text x="69.9323%" y="223.50"></text></g><g><title>ecs-bench`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (25 samples, 0.50%)</title><rect x="71.5119%" y="197" width="0.5026%" height="15" fill="rgb(213,181,19)" fg:x="3557" fg:w="25"/><text x="71.7619%" y="207.50"></text></g><g><title>ecs-bench`core::slice::_&lt;impl [T]&gt;::as_mut_ptr (55 samples, 1.11%)</title><rect x="72.0145%" y="197" width="1.1057%" height="15" fill="rgb(254,191,54)" fg:x="3582" fg:w="55"/><text x="72.2645%" y="207.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (46 samples, 0.92%)</title><rect x="79.3124%" y="181" width="0.9248%" height="15" fill="rgb(241,83,37)" fg:x="3945" fg:w="46"/><text x="79.5624%" y="191.50"></text></g><g><title>ecs-bench`core::slice::_&lt;impl [T]&gt;::iter_mut (561 samples, 11.28%)</title><rect x="70.5066%" y="213" width="11.2786%" height="15" fill="rgb(233,36,39)" fg:x="3507" fg:w="561"/><text x="70.7566%" y="223.50">ecs-bench`core::s..</text></g><g><title>ecs-bench`core::slice::iter::IterMut&lt;T&gt;::new (431 samples, 8.67%)</title><rect x="73.1202%" y="197" width="8.6651%" height="15" fill="rgb(226,3,54)" fg:x="3637" fg:w="431"/><text x="73.3702%" y="207.50">ecs-bench`co..</text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (77 samples, 1.55%)</title><rect x="80.2372%" y="181" width="1.5480%" height="15" fill="rgb(245,192,40)" fg:x="3991" fg:w="77"/><text x="80.4872%" y="191.50"></text></g><g><title>ecs-bench`core::sync::atomic::AtomicUsize::load (127 samples, 2.55%)</title><rect x="81.7853%" y="213" width="2.5533%" height="15" fill="rgb(238,167,29)" fg:x="4068" fg:w="127"/><text x="82.0353%" y="223.50">ec..</text></g><g><title>ecs-bench`core::sync::atomic::atomic_load (110 samples, 2.21%)</title><rect x="82.1271%" y="197" width="2.2115%" height="15" fill="rgb(232,182,51)" fg:x="4085" fg:w="110"/><text x="82.3771%" y="207.50">e..</text></g><g><title>ecs-bench`apecs::world::World::tick_with_context (3,810 samples, 76.60%)</title><rect x="8.1423%" y="229" width="76.5983%" height="15" fill="rgb(231,60,39)" fg:x="405" fg:w="3810"/><text x="8.3923%" y="239.50">ecs-bench`apecs::world::World::tick_with_context</text></g><g><title>ecs-bench`core::sync::atomic::atomic_load (20 samples, 0.40%)</title><rect x="84.3386%" y="213" width="0.4021%" height="15" fill="rgb(208,69,12)" fg:x="4195" fg:w="20"/><text x="84.5886%" y="223.50"></text></g><g><title>ecs-bench`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (18 samples, 0.36%)</title><rect x="86.5903%" y="197" width="0.3619%" height="15" fill="rgb(235,93,37)" fg:x="4307" fg:w="18"/><text x="86.8403%" y="207.50"></text></g><g><title>ecs-bench`&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (98 samples, 1.97%)</title><rect x="85.3639%" y="213" width="1.9702%" height="15" fill="rgb(213,116,39)" fg:x="4246" fg:w="98"/><text x="85.6139%" y="223.50">e..</text></g><g><title>ecs-bench`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (19 samples, 0.38%)</title><rect x="86.9522%" y="197" width="0.3820%" height="15" fill="rgb(222,207,29)" fg:x="4325" fg:w="19"/><text x="87.2022%" y="207.50"></text></g><g><title>ecs-bench`core::cmp::PartialOrd::lt (130 samples, 2.61%)</title><rect x="84.7407%" y="229" width="2.6136%" height="15" fill="rgb(206,96,30)" fg:x="4215" fg:w="130"/><text x="84.9907%" y="239.50">ec..</text></g><g><title>ecs-bench`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (1 samples, 0.02%)</title><rect x="87.3341%" y="213" width="0.0201%" height="15" fill="rgb(218,138,4)" fg:x="4344" fg:w="1"/><text x="87.5841%" y="223.50"></text></g><g><title>ecs-bench`core::sync::atomic::AtomicUsize::load (20 samples, 0.40%)</title><rect x="87.3542%" y="229" width="0.4021%" height="15" fill="rgb(250,191,14)" fg:x="4345" fg:w="20"/><text x="87.6042%" y="239.50"></text></g><g><title>ecs-bench`apecs::world::World::with_default_resource (1 samples, 0.02%)</title><rect x="87.7563%" y="213" width="0.0201%" height="15" fill="rgb(239,60,40)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="223.50"></text></g><g><title>ecs-bench`apecs::world::World::with_resource (1 samples, 0.02%)</title><rect x="87.7563%" y="197" width="0.0201%" height="15" fill="rgb(206,27,48)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="207.50"></text></g><g><title>ecs-bench`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="87.7563%" y="181" width="0.0201%" height="15" fill="rgb(225,35,8)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="191.50"></text></g><g><title>ecs-bench`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="87.7563%" y="165" width="0.0201%" height="15" fill="rgb(250,213,24)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="175.50"></text></g><g><title>ecs-bench`hashbrown::map::make_insert_hash (1 samples, 0.02%)</title><rect x="87.7563%" y="149" width="0.0201%" height="15" fill="rgb(247,123,22)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="159.50"></text></g><g><title>ecs-bench`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="87.7563%" y="133" width="0.0201%" height="15" fill="rgb(231,138,38)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="143.50"></text></g><g><title>ecs-bench`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="87.7563%" y="117" width="0.0201%" height="15" fill="rgb(231,145,46)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="127.50"></text></g><g><title>ecs-bench`&lt;apecs::core::ResourceId as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="87.7563%" y="101" width="0.0201%" height="15" fill="rgb(251,118,11)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="111.50"></text></g><g><title>ecs-bench`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="87.7563%" y="85" width="0.0201%" height="15" fill="rgb(217,147,25)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="95.50"></text></g><g><title>ecs-bench`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.02%)</title><rect x="87.7563%" y="69" width="0.0201%" height="15" fill="rgb(247,81,37)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="79.50"></text></g><g><title>ecs-bench`core::hash::Hasher::write_u64 (1 samples, 0.02%)</title><rect x="87.7563%" y="53" width="0.0201%" height="15" fill="rgb(209,12,38)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="63.50"></text></g><g><title>ecs-bench`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="87.7563%" y="37" width="0.0201%" height="15" fill="rgb(227,1,9)" fg:x="4365" fg:w="1"/><text x="88.0063%" y="47.50"></text></g><g><title>ecs-bench`&lt;apecs::core::Write&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.02%)</title><rect x="87.7764%" y="149" width="0.0201%" height="15" fill="rgb(248,47,43)" fg:x="4366" fg:w="1"/><text x="88.0264%" y="159.50"></text></g><g><title>ecs-bench`&lt;apecs::storage::vec::VecStorage&lt;T&gt; as apecs::storage::Storage&gt;::insert (3 samples, 0.06%)</title><rect x="87.7965%" y="149" width="0.0603%" height="15" fill="rgb(221,10,30)" fg:x="4367" fg:w="3"/><text x="88.0465%" y="159.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="87.8368%" y="133" width="0.0201%" height="15" fill="rgb(210,229,1)" fg:x="4369" fg:w="1"/><text x="88.0868%" y="143.50"></text></g><g><title>ecs-bench`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="87.8368%" y="117" width="0.0201%" height="15" fill="rgb(222,148,37)" fg:x="4369" fg:w="1"/><text x="88.0868%" y="127.50"></text></g><g><title>ecs-bench`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="87.8368%" y="101" width="0.0201%" height="15" fill="rgb(234,67,33)" fg:x="4369" fg:w="1"/><text x="88.0868%" y="111.50"></text></g><g><title>ecs-bench`core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="87.8569%" y="133" width="0.0201%" height="15" fill="rgb(247,98,35)" fg:x="4370" fg:w="1"/><text x="88.1069%" y="143.50"></text></g><g><title>ecs-bench`ecs_bench::new (7 samples, 0.14%)</title><rect x="87.7563%" y="229" width="0.1407%" height="15" fill="rgb(247,138,52)" fg:x="4365" fg:w="7"/><text x="88.0063%" y="239.50"></text></g><g><title>ecs-bench`core::iter::traits::iterator::Iterator::for_each (6 samples, 0.12%)</title><rect x="87.7764%" y="213" width="0.1206%" height="15" fill="rgb(213,79,30)" fg:x="4366" fg:w="6"/><text x="88.0264%" y="223.50"></text></g><g><title>ecs-bench`core::iter::traits::iterator::Iterator::fold (6 samples, 0.12%)</title><rect x="87.7764%" y="197" width="0.1206%" height="15" fill="rgb(246,177,23)" fg:x="4366" fg:w="6"/><text x="88.0264%" y="207.50"></text></g><g><title>ecs-bench`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.12%)</title><rect x="87.7764%" y="181" width="0.1206%" height="15" fill="rgb(230,62,27)" fg:x="4366" fg:w="6"/><text x="88.0264%" y="191.50"></text></g><g><title>ecs-bench`ecs_bench::new::_{{closure}} (6 samples, 0.12%)</title><rect x="87.7764%" y="165" width="0.1206%" height="15" fill="rgb(216,154,8)" fg:x="4366" fg:w="6"/><text x="88.0264%" y="175.50"></text></g><g><title>ecs-bench`apecs::storage::Entities::create (2 samples, 0.04%)</title><rect x="87.8569%" y="149" width="0.0402%" height="15" fill="rgb(244,35,45)" fg:x="4370" fg:w="2"/><text x="88.1069%" y="159.50"></text></g><g><title>ecs-bench`hibitset::BitSet::add (1 samples, 0.02%)</title><rect x="87.8770%" y="133" width="0.0201%" height="15" fill="rgb(251,115,12)" fg:x="4371" fg:w="1"/><text x="88.1270%" y="143.50"></text></g><g><title>ecs-bench`std::time::Instant::elapsed (26 samples, 0.52%)</title><rect x="87.8971%" y="229" width="0.5227%" height="15" fill="rgb(240,54,50)" fg:x="4372" fg:w="26"/><text x="88.1471%" y="239.50"></text></g><g><title>ecs-bench`ecs_bench::main (4,859 samples, 97.69%)</title><rect x="1.9501%" y="245" width="97.6880%" height="15" fill="rgb(233,84,52)" fg:x="97" fg:w="4859"/><text x="2.2001%" y="255.50">ecs-bench`ecs_bench::main</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (558 samples, 11.22%)</title><rect x="88.4198%" y="229" width="11.2183%" height="15" fill="rgb(207,117,47)" fg:x="4398" fg:w="558"/><text x="88.6698%" y="239.50">libsystem_kernel...</text></g><g><title>ecs-bench`main (4,973 samples, 99.98%)</title><rect x="0.0000%" y="341" width="99.9799%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="4973"/><text x="0.2500%" y="351.50">ecs-bench`main</text></g><g><title>ecs-bench`std::rt::lang_start (4,973 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9799%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="4973"/><text x="0.2500%" y="335.50">ecs-bench`std::rt::lang_start</text></g><g><title>ecs-bench`std::rt::lang_start_internal (4,973 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9799%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="4973"/><text x="0.2500%" y="319.50">ecs-bench`std::rt::lang_start_internal</text></g><g><title>ecs-bench`std::rt::lang_start::_{{closure}} (4,973 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9799%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="4973"/><text x="0.2500%" y="303.50">ecs-bench`std::rt::lang_start::_{{closure}}</text></g><g><title>ecs-bench`std::sys_common::backtrace::__rust_begin_short_backtrace (4,973 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9799%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="4973"/><text x="0.2500%" y="287.50">ecs-bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ecs-bench`core::ops::function::FnOnce::call_once (4,973 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9799%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="4973"/><text x="0.2500%" y="271.50">ecs-bench`core::ops::function::FnOnce::call_once</text></g><g><title>ecs-bench`std::time::Instant::elapsed (17 samples, 0.34%)</title><rect x="99.6381%" y="245" width="0.3418%" height="15" fill="rgb(211,81,21)" fg:x="4956" fg:w="17"/><text x="99.8881%" y="255.50"></text></g><g><title>all (4,974 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="4974"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`start (4,974 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="4974"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="99.9799%" y="341" width="0.0201%" height="15" fill="rgb(237,122,38)" fg:x="4973" fg:w="1"/><text x="100.2299%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="99.9799%" y="325" width="0.0201%" height="15" fill="rgb(244,218,35)" fg:x="4973" fg:w="1"/><text x="100.2299%" y="335.50"></text></g></svg></svg>